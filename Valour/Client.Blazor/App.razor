@using Valour.Shared
@using Valour.Api.Models;
@using Valour.Api.Client
@using Valour.Client.Device
@using Valour.Client.Layout
@using Valour.Client.Components.Utility
@using Valour.Client.Notifications
@using Valour.Client.Messages;
@using Valour.Shared.Models;
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Routing
@using Blazored.LocalStorage
@using Blazored.Modal
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.WebAssembly.Http
@using Valour.Client.Components.Sounds
@using Valour.Client.Components
@using Valour.Client.Utility
@using Version = Valour.Shared.Version

@inject IJSRuntime JS
@inject ILocalStorageService LocalStorage

<!-- Enable app sounds -->
<SoundsComponent @key="@("sounds-component")"></SoundsComponent>
<KeyboardListener />

<!-- Enable app cookies -->
<CookiesComponent></CookiesComponent>

@if (triedInitialLogin)
{
    <!-- Main routing component -->
    <Router AppAssembly="@typeof(Valour.Client.Pages.Index).Assembly">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
}
else
{
    <Loading Subtext='Logging you in...'></Loading>
}

@if (!hideUpdate)
{
    <div class="update-footer">
        <p class="update-text">There is a new version of Valour available! Refresh to blast into new features! 🚀🚀🚀</p>
        <p style="display: inline-block" class="update-text">Current version:&nbsp;</p>
        <p style="color:red; display:inline-block" class="update-text">@(typeof(ISharedUser).Assembly.GetName().Version.ToString()) (@(Version.ShortHash))</p>
        <p style="display: inline-block" class="update-text">&nbsp;|&nbsp;</p>
        <p style="display: inline-block" class="update-text">New version:&nbsp;</p>
        <p style="color:lawngreen; display:inline-block" class="update-text">@newVersion</p>

        <a class="btn-update" @onclick="OnClickUpdateOk">Ok</a>
    </div>
}


@code{

    string newVersion = "(Pinging server)";

    bool triedInitialLogin;

    bool hideUpdate = true;

    public async Task OnClickUpdateOk()
    {
        hideUpdate = true;
        StateHasChanged();

        //await JS.InvokeVoidAsync("location.reload");
    }

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        await DevicePreferences.LoadPreferences(LocalStorage);
        await LogToConsole("Loaded user preferences", "magenta");
        
        ColorLogger.App = this;
        ColorLogger.Setup();

        await JS.InvokeAsync<object>(
          "blazorFuncs.registerClient",
          DotNetObjectReference.Create(this)
        );

        // Request notifications in background
        _ = RequestNotificationSubscriptionAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var isMobile = await JS.InvokeAsync<bool>("IsMobile");
            var isEmbedded = await JS.InvokeAsync<bool>("IsEmbedded");

            DeviceInfo.IsMobile = isMobile;
            DeviceInfo.IsEmbedded = isEmbedded;
            
            if (!ValourClient.IsLoggedIn)
            {
                var cookieToken = await JS.GetCookieAsync("token");

                if (!string.IsNullOrWhiteSpace(cookieToken))
                {
                    var result = await ValourClient.InitializeUser(cookieToken);

                    if (result.Success) {
                        ColorLogger.Log($"Auto-logged user {result.Data.Name}", "magenta");
                    }
                }
            }

            triedInitialLogin = true;

            StateHasChanged();
        }
    }

    public async Task RequestNotificationSubscriptionAsync()
    {
        var subscription = await JS.InvokeAsync<Valour.Client.Notifications.NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription != null)
        {
            try
            {
                await ValourClient.PrimaryNode.PostAsync($"api/notification/subscribe", subscription);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    public async Task LogToConsole(string msg, string color = "white")
    {
        await JS.InvokeVoidAsync($"Log", msg, color);
    }

    [JSInvokable("NotifyPushSub")]
    public static async Task NotifyPushSub(string endpoint, string key, string auth)
    {
        Console.WriteLine(endpoint);
        Console.WriteLine(key);
        Console.WriteLine(auth);

        Api.Models.NotificationSubscription not = new()
        {
            Endpoint = endpoint,
            Auth = auth,
            Key = key,
            UserId = ValourClient.Self.Id
        };

        // Send subscription information to server
        var response = await ValourClient.PostAsyncWithResponse<TaskResult>($"Notification/SubmitSubscription", not);

        Console.WriteLine(response.Message);
    }

    [JSInvokable("OnServiceUpdateAvailable")]
    public async Task<string> AppUpdate()
    {
        // Get latest version number
        newVersion = (await ValourClient.GetAsync("api/version")).Data;

        Console.WriteLine("New version available");
        hideUpdate = false;
        StateHasChanged();
        return await Task.FromResult("Alerted client");
    }

    [JSInvokable("OnServiceUpdateUnavailable")]
    public static void AppNotUpdate()
    {
        Console.WriteLine("New version not available");
    }
}
