@implements IDisposable

@inject ClientWindowManager windowManager
@inject ChannelListManager listManager

<div @onmousedown:stopPropagation='true'>
    <ContextMenuTrigger MenuId='list-context' @onmousedown='async () => await ChannelListContextMenuComponent.SetSelectedItem(Channel)'>
        <div class="@Chosen_CSS" 
            @onclick="OnClick" 
            @ondragstart="() => listManager.OnItemStartDragInCategory(Channel, ParentCategory)"
            @ondrop="async () => await listManager.OnItemDropOnChatChannel(this)" draggable="true" id="@Channel.Id">
            <img class="chat-icon" src="media/Channel-Icon.svg">
            <p class="channel-name">
                @Channel.Name
            </p>
        </div>
    </ContextMenuTrigger>
</div>

@code {
    // Demonstrates how a parent component can supply parameters
    [Parameter]
    public Channel Channel { get; set; }

    [Parameter]
    public ChannelListCategoryComponent ParentCategory { get; set; }

    public string Chosen_CSS
    {
        get
        {
            if (ValourClient.IsChannelOpen(Channel))
            {
                return "channel open";
            }

            return "channel";
        }
    }

    public async Task OnChannelWindowUpdate()
    {
        StateHasChanged();
    }

    public async Task OnClick()
    {

        listManager.OnItemClickInCategory(Channel, ParentCategory);

        ClientWindow window = windowManager.GetSelectedWindow();

        Console.WriteLine(window.Index);

        if (window is ChatChannelWindow)
        {
            ChatChannelWindow channelWindow = (ChatChannelWindow)window;
            if (channelWindow != null)
            {
                // It's the same channel, cancel
                if (channelWindow.Channel.Id == Channel.Id)
                {
                    return;
                }

                Console.WriteLine(Channel.Name);
                await channelWindow.Component.OnWindowChannelChange(Channel);

                await windowManager.RefreshOpenedChannels();
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        Channel.OnAnyUpdated += OnChatChannelUpdate;
        windowManager.OnChannelWindowUpdate += OnChannelWindowUpdate;
    }

    public async Task OnChatChannelUpdate(Channel channel, int flags)
    {
        if (Channel.Id == channel.Id)
        {
            this.Channel = channel;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        Channel.OnAnyUpdated -= OnChatChannelUpdate;
        windowManager.OnChannelWindowUpdate -= OnChannelWindowUpdate;
    }
}