@inherits ContextMenu<MessageContextMenu.MessageContextParams>
@inject IJSRuntime JsRuntime

<ContextMenuItem OnClick="@OnClickReply">
    <Label>Reply</Label>
    <Icon><i class="bi bi-reply-fill"></i></Icon>
</ContextMenuItem>

@if (Data.Message.AuthorUserId == ValourClient.Self.Id)
{
    <ContextMenuItem OnClick="@OnClickEdit">
        <Label>Edit</Label>
        <Icon><i class="bi bi-pen-fill"></i></Icon>
    </ContextMenuItem>
}

@if (_authorMember is not null)
{
    <ContextSubMenu>
        <Label>Member</Label>
        <Icon><i class="bi bi-caret-right-fill"></i></Icon>
        <Content>
            <MemberContextMenu Data="@_memberContextData" />
        </Content>
    </ContextSubMenu>
}

<ContextSubMenu>
    <Label>Copy</Label>
    <Icon><i class="bi bi-caret-right-fill"></i></Icon>
    <Content>
        <ContextMenuItem OnClick="@OnClickCopyText">Text</ContextMenuItem>
        <ContextMenuItem OnClick="@OnClickCopyId">Message Id</ContextMenuItem>
    </Content>
</ContextSubMenu>

@if (_deletePermission == PermissionState.True)
{
    <ContextMenuItem OnClick="@OnClickDelete" Color="red">
        <Label>Delete</Label>
        <Icon><i class="bi bi-trash-fill"></i></Icon>
    </ContextMenuItem>
}

<ContextMenuItem OnClick="@OnClickReport" Color="red">
    <Label>Report</Label>
    <Icon><i class="bi bi-flag-fill"></i></Icon>
</ContextMenuItem>


@code {
    
    public class MessageContextParams
    {
        public Message Message;
        public ChatChannelWindowComponent WindowComponent;
        public MessageComponent MessageComponent;
    }

    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    private PlanetMember _authorMember;
    private PermissionState _deletePermission = PermissionState.False;
    private MemberContextMenu.MemberContextParams _memberContextData;

    protected override async Task OnInitializedAsync()
    {
        if (Data.Message.PlanetId is not null)
        {
            _authorMember = await Data.Message.GetAuthorMemberAsync();
            _memberContextData = new()
            {
                Member = _authorMember,
            };
        }
        else
        {
            _authorMember = null;
        }

        if (Data.Message.AuthorUserId == ValourClient.Self.Id)
        {
            _deletePermission = PermissionState.True;
        }
        else {
            if (_authorMember is not null)
            {
                _deletePermission = Data.WindowComponent.ChannelPermissions.GetPermissionState(ChatChannelPermissions.ManageMessages);
            }
            else
            {
                _deletePermission = PermissionState.False;
            }
        }
    }

    private async Task OnClickReply()
    {
        // Close the context menu
        await CloseAsync();
        
        var input = Data.MessageComponent.Holder.ChatComponent.MessageHolder.InputComponent;
        await input.SetReplyMessage(Data.Message);
    }

    private async Task OnClickDelete()
    {
        await CloseAsync();
        
        var data = new ConfirmModalComponent.ModalParams("Delete message?", Data.Message.Content, "Delete", "Cancel",
            async () =>
            {
                await Data.Message.DeleteAsync();
            },
            () => Task.CompletedTask
        );

        ModalRoot.OpenModal<ConfirmModalComponent>(data);
    }

    private async Task OnClickReport()
    {
        await CloseAsync();
        
        var data = new ReportModalComponent.ModalParams()
        {
            Report = new Report()
            {
                ReportingUserId = ValourClient.Self.Id,
                MessageId = Data.MessageComponent.Message.Id,
                ChannelId = Data.MessageComponent.Message.ChannelId,
                PlanetId = Data.MessageComponent.Message.PlanetId
            }
        };
        
        ModalRoot.OpenModal<ReportModalComponent>(data);
    }

    private async Task OnClickEdit()
    {
        await CloseAsync();
        await Data.MessageComponent.OpenEditMode();
    }

	private async Task OnClickCopyText(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.Message.Content);
	}

	private async Task OnClickCopyId(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.Message.Id);
	}
}
