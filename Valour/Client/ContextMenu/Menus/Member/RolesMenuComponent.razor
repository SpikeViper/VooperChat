@implements IDisposable

@foreach (var role in Member.Planet.Roles)
{
	var cRole = role;
	var hasRole = Member.Roles.Any(x => x.Id == role.Id);

	<ContextMenuItem>
		<div class="role-row" @onpointerdown="@(() => OnRoleClick(cRole, !hasRole))">
			<div class="v-checkmark-wrapper">
				<input class="role-checkbox" type="checkbox"
                			       checked="@hasRole" disabled />
				<span class="v-checkmark" style="@(hasRole ? $"background-color: {role.Color};" : "")"></span>
				<i class="bi bi-check v-checkmark-fill"></i>
			</div>
			<p style="color:@role.Color; display: inline-block; margin: 0;">@role.Name</p>
		</div>
	</ContextMenuItem>
}

@code {
	[Parameter]
	public PlanetMember Member { get; set; }

	protected override void OnInitialized()
	{
		Member.Planet.Roles.Changed += OnRoleUpdate;
		Member.Updated += OnMemberUpdate;
	}

	void IDisposable.Dispose()
	{
		Member.Planet.Roles.Changed -= OnRoleUpdate;
		Member.Updated -= OnMemberUpdate;
	}

	private void OnRoleUpdate(ModelListChangeEvent<PlanetRole> eventData)
	{
		StateHasChanged();
	}

	private void OnMemberUpdate(ModelUpdateEvent<PlanetMember> eventData)
	{
		if (eventData.PropsChanged.Contains(nameof(PlanetMember.RoleMembershipHash)))
		{
			StateHasChanged();
		}
	}

	private async Task OnRoleClick(PlanetRole role, bool value)
	{
		var task = value ? Member.AddRoleAsync(role.Id) : Member.RemoveRoleAsync(role.Id);
		
		await ToastContainer.Instance.WaitToastWithTaskResult(new ProgressToastData<TaskResult>(
			"Updating roles...",
			"Loading...",
			task,
			"Roles updated!"
		));

		StateHasChanged();
	}
}
