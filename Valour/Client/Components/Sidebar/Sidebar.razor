@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@inject WindowManager WindowManager
@implements IAsyncDisposable

<div class="sidebar-container @ActiveClass @FlipClass">
	<div id="@_id" class="sidebar-menu">
		<SidebarOpenTab OnClicked="OnOpenTabClicked" Open="@_active" Flip="Flip"></SidebarOpenTab>
		<div class="sidebar-2" id="sidebar2">
			<div class="sidebar-content">
				@if (!Flip)
                {
                	<VersionComponent />
                }
				<div class="tab-container">
					@switch (_selectedTab)
					{
						case "Channels":
						{
							<ChannelListComponent></ChannelListComponent>
							break;
						}
						case "Friends":
						{
							<FriendListComponent></FriendListComponent>
							break;
						}
						case "Members":
						{
							<MemberListComponent></MemberListComponent>
							break;
						}
						case "Notifications":
						{
							<NotificationsListComponent></NotificationsListComponent>
							break;
						}
					}
				</div>
				@if (!Flip)
				{
					<SelfInfoComponent />
				}
				<SidebarTabstrip Sidebar="@this" OnSelected="OnSelected" Flip="Flip"></SidebarTabstrip>
			</div>
		</div>
	</div>
</div>

@code {

	private static event Func<Task> OnToggleMobileSidebar;
	public static async Task ToggleMobileSidebar()
	{
		if (OnToggleMobileSidebar is not null)
			await OnToggleMobileSidebar.Invoke();
	}
	
	[Parameter]
	public bool Flip { get; set; }
	public string FlipClass => Flip ? "flip" : "";
	
    private string _selectedTab = "Friends";
	private bool _active = !DeviceInfo.IsMobile;
	
	private string ActiveClass => _active ? "sidebar-active" : "";

	private string _id = "sidebar-" + Guid.NewGuid();
	
	/// <summary>
	/// Dotnet object reference for use in Javascript
	/// </summary>
	private DotNetObjectReference<Sidebar> _thisRef;

	/// <summary>
	/// Module for calling Javascript functions
	/// </summary>
	private IJSInProcessObjectReference _jsModule;

	private IJSInProcessObjectReference _jsRef;


	public class SidebarLayout
	{
		public string Left { get; set; }
		public string Right { get; set; }
	}
	
	public static SidebarLayout HomeLayout = new SidebarLayout
	{
		Left = "Friends",
		Right = "Notifications"
	};
	
	public static SidebarLayout ChannelLayout = new SidebarLayout
	{
		Left = "Channels",
		Right = "Members"
	};


	protected override async Task OnInitializedAsync()
	{
		if (await LocalStorage.ContainKeyAsync("sidebar-home-left"))
		{
			HomeLayout.Left = await LocalStorage.GetItemAsync<string>("sidebar-home-left");
		}
		if (await LocalStorage.ContainKeyAsync("sidebar-home-right"))
		{
			HomeLayout.Right = await LocalStorage.GetItemAsync<string>("sidebar-home-right");
		}
		if (await LocalStorage.ContainKeyAsync("sidebar-channel-left"))
		{
			ChannelLayout.Left = await LocalStorage.GetItemAsync<string>("sidebar-channel-left");
		}
		if (await LocalStorage.ContainKeyAsync("sidebar-channel-right"))
		{
			ChannelLayout.Right = await LocalStorage.GetItemAsync<string>("sidebar-channel-right");
		}


		if (WindowManager.FocusedPlanet is null)
		{
			// Home window layout
			if (Flip)
			{
				_selectedTab = HomeLayout.Right;
			}
			else
			{
				_selectedTab = HomeLayout.Left;
			}
		}
		else
		{
			// Chat channel layout
			if (Flip)
			{
				_selectedTab = ChannelLayout.Right;
			}
			else
			{
				_selectedTab = ChannelLayout.Left;
			}
		}

		OnToggleMobileSidebar += OnOpenTabClicked;
	}

	private async Task OnSelected(TabStripItem tab)
	{
		// Save change to local storage
		if (WindowManager.FocusedPlanet is null)
		{
			if (Flip)
			{
				HomeLayout.Right = tab.Name;
				await LocalStorage.SetItemAsStringAsync("sidebar-home-right", tab.Name);
			}
			else
			{
				HomeLayout.Left = tab.Name;
				await LocalStorage.SetItemAsStringAsync("sidebar-home-left", tab.Name);
			}
		}
		else
		{
			if (Flip)
			{
				ChannelLayout.Right = tab.Name;
				await LocalStorage.SetItemAsStringAsync("sidebar-channel-right", tab.Name);
			}
			else
			{
				ChannelLayout.Left = tab.Name;
				await LocalStorage.SetItemAsStringAsync("sidebar-channel-left", tab.Name);
			}
		}
		
		_selectedTab = tab.Name;
		
		StateHasChanged();
	}
	
	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		await _jsModule.InvokeVoidAsync("cleanup");
		await _jsModule.DisposeAsync();
		_thisRef.Dispose();
		OnToggleMobileSidebar -= OnOpenTabClicked;
	}
	
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_thisRef = DotNetObjectReference.Create(this);
			_jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Sidebar/Sidebar.razor.js");
			_jsRef = await _jsModule.InvokeAsync<IJSInProcessObjectReference>("init", _thisRef, _id);
		}
	}

	private async Task OnOpenTabClicked()
	{
		if (!DeviceInfo.IsMobile)
		{
			_active = !_active;
			StateHasChanged();
		}
		else
		{
			await _jsRef.InvokeVoidAsync("toggleOpen");	
		}
	}
}