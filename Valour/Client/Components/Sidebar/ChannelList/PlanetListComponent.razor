@inject WindowManager WindowManager
@inject ChannelListManager ListManager

<ContextMenuTrigger 
    MouseButtonTrigger="MouseButtonTrigger.ContextOrHold" 
    MenuId='planet-context'>
    <div 
        class="@GetCssClass()" 
        id="list-@Planet.Id"
        @onpointerdown:stopPropagation="true"
        @onpointerdown='async () => await PlanetContextMenuComponent.SetSelectedPlanet(Planet)'>
        <div style="cursor:pointer" id="list-inner-@Planet.Id">
            <div @onclick='@OnClick'
                 class="header" ondragover="event.preventDefault();">
                <img alt="planet dropdown arrow" class="arrow" src="_content/Valour.Client/media/channel-icons/category_unread.svg" style="@GetArrowStyle()">
                <p class="planet-name">
                    @Planet.Name
                </p>

                <img alt="planet icon" src="@Planet.IconUrl" class="icon" />
            </div>
        </div>
        <div class="channel-list">
            
            @if (Open)
            {
                <div class="channel planet-about" @onclick="OnClickPlanetInfo">
                    <img class="planet-about-icon" src="_content/Valour.Client/media/Home-icon.svg" alt="Info channel"/>
                    <p class="name">
                        About Planet
                    </p>
                </div>

                <ContextMenuTrigger MouseButtonTrigger="MouseButtonTrigger.ContextOrHold" MenuId='list-context'>
                    <!-- The Modal -->
                    @foreach (var channel in TopChannels)
                    {
                        <ChannelListItem @key="@channel.Id"
                                         PlanetComponent="@this"
                                         AllChannels="@AllChannels"
                                         Channel="@channel"
                                         IsTopLevel="@true" />
                    }
                </ContextMenuTrigger>
            }
        </div>
    </div>
</ContextMenuTrigger>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    public bool Open { get; set; } = true;

    public List<Channel> TopChannels;
    public List<Channel> AllChannels { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Initialize collections
        AllChannels = new List<Channel>();
        TopChannels = new List<Channel>();

        // Handle list change
        ModelObserver<Channel>.OnAnyUpdated += OnChannelUpdate;

        // Handle Deletions
        ModelObserver<Channel>.OnAnyDeleted += OnChannelDelete;

        ValourClient.OnCategoryOrderUpdate += OnOrderUpdate;
        
        await GetAllChannels();
        GetTopLevelItems();
    }

    private Task OnOrderUpdate(CategoryOrderEvent eventData)
    {
        if (eventData.PlanetId != Planet.Id)
            return Task.CompletedTask;

        if (eventData.CategoryId is null)
        {
            GetTopLevelItems();
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private Task OnChannelUpdate(ModelUpdateEvent<Channel> eventData)
    {
        if (eventData.Model.PlanetId != Planet.Id || // Don't care about other planets
            eventData.Model.ParentId is not null) // We only render top level
                return Task.CompletedTask; 

        // Add and sort new item
        if (!TopChannels.Any(x => x.Id == eventData.Model.Id))
            TopChannels.Add(eventData.Model);
        
        SortTopItems();
        
        StateHasChanged();

        return Task.CompletedTask;
    }
    
    private Task OnChannelDelete(Channel channel)
    {
        if (channel.PlanetId != Planet.Id || // Don't care about other planets
            channel.ParentId != null) // We only render top level
            return Task.CompletedTask;

        // Remove - don't need to sort when removing
        TopChannels.RemoveAll(x => x.Id == channel.Id);
        
        StateHasChanged();

        return Task.CompletedTask;
    }

    private void SortTopItems()
    {
        TopChannels.Sort((x, y) =>
        {
            var a = x.Position.GetValueOrDefault();
            var b = y.Position.GetValueOrDefault();
            return a.CompareTo(b);
        });
    }

    public string GetCssClass() => 
        Open ? "planet is-open" : "planet";

    public string GetArrowStyle() =>
        Open ? "transform: rotate(90deg);" : "";

    public void OnClick()
    {
        Open = !Open;
        StateHasChanged();
    }

    private void GetTopLevelItems()
    {
        TopChannels.Clear();
        foreach (var item in AllChannels)
        {
            if (item.ParentId is null)
            {
                TopChannels.Add(item);
            }
        }

        SortTopItems();
            
        Console.WriteLine($"Found {TopChannels.Count} top level channels and categories");
    }

    private async Task GetAllChannels()
    {
        AllChannels = await Planet.GetAllChannelsAsync();
    }
    
    private async Task OnClickPlanetInfo()
    {
        var currentWindow = WindowManager.Instance.GetSelectedWindow();
        await WindowManager.Instance.ReplaceWindow(currentWindow, new PlanetInfoWindow(Planet));
    }
}
