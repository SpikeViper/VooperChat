@implements IDisposable
@inject NavigationManager NavigationManager
@inject WindowManager WindowManager

<div class="notifications-container">
    <p class="subtitle mb-2">Notifications</p>
    <div class="v-gradient-underline"></div>
    <!-- This wrapper flips the order. Why? Because we sent the notifications in reverse order. Why? -->
    <!-- Because adding new items to the end of a list is a lot faster than inserting to the start. -->
    <div class="item-wrapper">
        <Virtualize TItem="Notification" Items="ValourClient.UnreadNotifications">
            <NotificationCard @key="@context.Id" Notification="@context"/>
        </Virtualize>
    </div>
    <div style="flex-grow: 1; height: 0"></div>
    <div class="clear-wrapper">
        <button class="v-btn clear-btn" @onclick="OnClickClearNotifications">Clear All Notifications</button>
    </div>
</div>
@code {

    private string _imageUrl;
    
    protected override void OnInitialized()
    {
        ValourClient.OnNotificationReceived += HandleNotificationReceived;
        ValourClient.OnNotificationsCleared += HandleNotificationsCleared;
    }

    void IDisposable.Dispose()
    {
        ValourClient.OnNotificationReceived -= HandleNotificationReceived;
        ValourClient.OnNotificationsCleared -= HandleNotificationsCleared;
    }
    
    private async Task OnClickClearNotifications()
    {
        await ValourClient.ClearNotificationsAsync();
    }

    private Task HandleNotificationReceived(Notification notification)
    {
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleNotificationsCleared()
    {
        StateHasChanged();
        return Task.CompletedTask;
    }
}