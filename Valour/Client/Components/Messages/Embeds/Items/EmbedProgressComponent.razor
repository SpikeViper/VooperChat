@implements IDisposable
@inject IJSRuntime JS
@inherits BaseEmbedItemComponent

<div style="@item.GetStyle()">
	@if (item.NameItem is not null)
	{
		<EmbedTextItemComponent _item="@item.NameItem"></EmbedTextItemComponent>
	}
	<div class="@item.GetClasses()">
		@foreach(EmbedProgressBar baritem in item.Children.Select(x => (EmbedProgressBar)x))
		{
			<div class="@baritem.GetClasses()" role="progressbar" style="@baritem.GetStyle()" aria-valuenow="@baritem.Value" aria-valuemin="0" aria-valuemax="100">
				@if (baritem.ShowLabel)
				{
					<span>@baritem.Value%</span>
				}
			</div>
		}
	</div>
</div>

@code {
	public EmbedProgress item { get; set; }

	[CascadingParameter]
    public IModalService Modal { get; set; }

	protected override void OnInitialized()
	{
		item = (EmbedProgress)_item;
		if (item.Id is not null)
			embedComponent.ItemComponents[item.Id] = this;
		embedComponent.RefreshItemComponents += Refresh;
	}

	public void Dispose()
    {
        embedComponent.RefreshItemComponents -= Refresh;
		if (item.Id is not null)
            embedComponent.ItemComponents.Remove(item.Id, out var _);
    }

	public override void Refresh()
	{
		item = (EmbedProgress)_item;
		if (item.Id is not null)
			embedComponent.ItemComponents[item.Id] = this;
		StateHasChanged();
	}
}