@implements IDisposable
@using Valour.Api.Models.Messages

@if (embed is null)
{
	return;
}
<CascadingValue Value="@this">
	<CascadingValue Value="@MessageComponent">
		<div class="embed" style="@embed.GetStyle()">
			@if (embed.CurrentlyDisplayed != null)
			{
				if (embed.CurrentlyDisplayed.Title is not null) {
					<div class="embed-title" style="@embed.CurrentlyDisplayed.GetTitleStyle(embed)">
						@((MarkupString)MarkdownManager.GetHtml(embed.CurrentlyDisplayed.Title))
					</div>
				}

				if (embed.CurrentlyDisplayed.Children is not null)
				{
					foreach (EmbedItem item in embed.CurrentlyDisplayed.Children)
					{
						<EmbedItemComponent embed="@embed" Message="@Message" item="@item"></EmbedItemComponent>
					}
				}

				if (embed.Pages is not null && embed.Pages.Count > 1 && !embed.HideChangePageArrows)
				{
					<div style="margin-top: 10px;">
						<button @onclick="PrevPage" class="btn btn-primary btn-sm" style="display: inline-block;box-shadow: none;">&lt</button>
						<p style="font-size:12px;display: inline-block;">@embed.currentPage</p>
						<button @onclick="NextPage" class="btn btn-primary btn-sm" style="display: inline-block;box-shadow: none;">&gt</button>
					</div>
				}

				if (embed.CurrentlyDisplayed.Footer is not null)
				{
					<div class="embed-footer" style="@embed.CurrentlyDisplayed.GetFooterStyle(embed)">
						@((MarkupString)MarkdownManager.GetHtml(embed.CurrentlyDisplayed.Footer))
					</div>
				}
			}
		</div>
	</CascadingValue>
</CascadingValue>


@code {

	[CascadingParameter]
	public MessageHolderComponent Holder { get; set; }

	[Parameter]
	public Message Message { get; set; }

	[Parameter]
	public MessageComponent MessageComponent { get; set; }

	public event Action RefreshRowComponents;
	public event Action RefreshRootItemComponents;
	public event Action RefreshFormComponents;
	public event Action RefreshItemComponents;

	private bool ProcessPageChange = false;

	private bool ProcessPageChangeForForms = false;

	public bool ProcessingEmbedUpdate = false;

	public Embed embed = null;

	public EmbedPage page { get; set; }

	public ConcurrentDictionary<string, BaseEmbedItemComponent> ItemComponents { get; set; }
	public ConcurrentDictionary<string, EmbedItemComponent> EmbedRootItemComponents { get; set; }
	public ConcurrentDictionary<string, EmbedRowComponent> EmbedRowComponents { get; set; }
	public ConcurrentDictionary<string, EmbedFormComponent> EmbedFormComponents { get; set; }
	public ConcurrentDictionary<string, IParentItem> IdToParentEmbedItem { get; set; }
	public ConcurrentDictionary<string, INameable> IdToNameItemEmbedItem { get; set; }

	public void Dispose()
	{
		ValourClient.OnPersonalEmbedUpdate -= OnPersonalEmbedUpdate;
		ValourClient.OnChannelEmbedUpdate -= OnChannelEmbedUpdate;
	}

	protected override void OnInitialized()
	{
		StateHasChanged();
		ValourClient.OnPersonalEmbedUpdate += OnPersonalEmbedUpdate;
		ValourClient.OnChannelEmbedUpdate += OnChannelEmbedUpdate;
		ValourClient.OnMessageEdited += OnReceiveMessageEdit;
		ItemComponents = new();
		EmbedRootItemComponents = new();
		EmbedRowComponents = new();
		EmbedFormComponents = new();
		IdToParentEmbedItem = new();
		IdToNameItemEmbedItem = new();

		embed = Message.Embed;
		foreach (var page in embed.Pages) {
			foreach (var item in page.GetAllItems()) {
				if (item.Id is not null) {
					if (item.ItemType == EmbedItemType.Progress || item.ItemType == EmbedItemType.TextArea
						|| item.ItemType == EmbedItemType.Text || item.ItemType == EmbedItemType.InputBox
						|| item.ItemType == EmbedItemType.DropDownMenu)
					{
						var nameableitem = (INameable)item;
						if (nameableitem.NameItem is not null && nameableitem.NameItem.Id is not null)
							IdToNameItemEmbedItem[nameableitem.NameItem.Id] = (INameable)item;
					}
					IdToParentEmbedItem[item.Id] = item.Parent;
				}
			}
		}
	}

	public async Task OnReceiveMessageEdit(Message message)
    {
        // Ignore messages not meant for this channel
        if (message.Id != Message.Id)
            return;

        Message.EmbedData = message.EmbedData;
		//Console.WriteLine(update.NewEmbedContent);
		Message.SetEmbedParsed(false);
		embed = Message.Embed;
		ProcessPageChange = true;
		StateHasChanged();
	}

	public async Task OnChannelEmbedUpdate(ChannelEmbedUpdate update)
	{
		if (update.TargetMessageId == Message.Id)
		{
			int currentpage = embed.currentPage;
			Message.EmbedData = update.NewEmbedContent;
			Message.SetEmbedParsed(false);
			embed = Message.Embed;
			if (!embed.KeepPageOnUpdate)
			{
				embed.currentPage = embed.StartPage;
			}
			else
				embed.currentPage = currentpage;

			if (embed.currentPage >= embed.Pages.Count) 
				embed.currentPage = embed.StartPage;
			ProcessPageChange = true;
			ProcessingEmbedUpdate = true;
			UpdateItems();
			ProcessingEmbedUpdate = false;
			await Holder.ScrollToBottom();
		}
	}

	public async Task OnPersonalEmbedUpdate(PersonalEmbedUpdate update)
	{
		if (update.TargetMessageId == Message.Id)
		{
			try
			{
				if (update.NewEmbedContent is not null) {
					IdToParentEmbedItem = new();
					int currentpage = embed.currentPage;
					Message.EmbedData = update.NewEmbedContent;
					//Console.WriteLine(update.NewEmbedContent);
					Message.SetEmbedParsed(false);
					embed = Message.Embed;
					if (!embed.KeepPageOnUpdate)
					{
						embed.currentPage = embed.StartPage;
					}
					else
						embed.currentPage = currentpage;

					if (embed.currentPage >= embed.Pages.Count)
						embed.currentPage = embed.StartPage;
					ProcessPageChange = true;
					ProcessingEmbedUpdate = true;
					UpdateItems();
					ProcessingEmbedUpdate = false;
					await Holder.ScrollToBottom();
					foreach (var page in embed.Pages) {
						foreach (var item in page.GetAllItems()) {
							if (item.Id is not null) {
								if (item.ItemType == EmbedItemType.Progress || item.ItemType == EmbedItemType.TextArea
									|| item.ItemType == EmbedItemType.Text || item.ItemType == EmbedItemType.InputBox
									|| item.ItemType == EmbedItemType.DropDownMenu)
								{
									var nameableitem = (INameable)item;
									if (nameableitem.NameItem is not null && nameableitem.NameItem.Id is not null)
										IdToNameItemEmbedItem[nameableitem.NameItem.Id] = (INameable)item;
								}
								IdToParentEmbedItem[item.Id] = item.Parent;
							}
						}
					}
				}
				// means we are in a targetted update
				else {
					// this gets super fun due to the fact that we have to update components in a certain order :sob:
					// this also means that EmbedData will get more and more out of sync with the embed but that *should not* be an issue

					var data = JsonSerializer.Deserialize<List<EmbedItem>>(update.ChangedEmbedItemsContent);
					var embed = Message.Embed;

					foreach (var item in data) {
						if (item.ItemType == EmbedItemType.EmbedRow) {
							// get parent of this item
							var parent = IdToParentEmbedItem[item.Id];
							parent.Children.Remove(parent.Children.First(x => x.Id == item.Id));
							parent.Children.Add(item);
							item.Init(embed, parent);
							
							// now rerender the item
							if (EmbedRowComponents.ContainsKey(item.Id)) {
								EmbedRowComponents[item.Id].Row = (EmbedRow)item;
								EmbedRowComponents[item.Id].Refresh();
							}
							else
								Console.WriteLine($"Could not find embed row with id of {item.Id}");
						}
					}
					for (int i = 0; i < 3; i++) {
						foreach (var item in data) {
							// root item
							if (i == 0 && item.ItemType != EmbedItemType.EmbedRow) {
								//if (item.Id != "money-text")
								//	Console.WriteLine($"Updating {item.ItemType} with id {item.Id}");
								//if (item.ItemType == EmbedItemType.Text) {
								//	var text = (EmbedTextItem)item;
								//	Console.WriteLine($"{item.Id} with content {text.Text}");
								//}
								if (!IdToParentEmbedItem.ContainsKey(item.Id) || IdToParentEmbedItem[item.Id] is null) {
									if (IdToNameItemEmbedItem.ContainsKey(item.Id))
										IdToNameItemEmbedItem[item.Id].NameItem = (EmbedTextItem)item;
								}
								else {
									var parent = IdToParentEmbedItem[item.Id];
									if (parent.Children is null) {
										parent.Children = new();
										parent.Children.Add(item);
										item.Init(embed, parent);
									}
									else {
										var self = parent.Children.First(x => x.Id == item.Id);
										parent.Children.Remove(self);
										parent.Children.Add(item);
										item.Init(embed, parent);
									}
								}

								if (EmbedRootItemComponents.ContainsKey(item.Id)) {
									EmbedRootItemComponents[item.Id].item = item;
									EmbedRootItemComponents[item.Id].Refresh();
								}
								else
									Console.WriteLine($"Could not find embed item with id of {item.Id} (1st case)");
							}
							else if (i == 1 && item.ItemType == EmbedItemType.Form && item.ItemType != EmbedItemType.EmbedRow) {
								if (EmbedFormComponents.ContainsKey(item.Id))
									EmbedFormComponents[item.Id].Refresh();
								else
									Console.WriteLine($"Could not find embed form with id of {item.Id} (2nd case)");
							}
							else if (i == 2 && item.ItemType != EmbedItemType.EmbedRow && item.ItemType != EmbedItemType.Form) {
								if (ItemComponents.ContainsKey(item.Id))
									ItemComponents[item.Id].Refresh();
								else
									Console.WriteLine($"Could not find embed item with id of {item.Id} (3rd case)");
							}
						}
					}
					foreach (var page in embed.Pages) {
						foreach (var item in page.GetAllItems()) {
							if (item.Id is not null) {
								if (item.ItemType == EmbedItemType.Progress || item.ItemType == EmbedItemType.TextArea
									|| item.ItemType == EmbedItemType.Text || item.ItemType == EmbedItemType.InputBox
									|| item.ItemType == EmbedItemType.DropDownMenu)
								{
									var nameableitem = (INameable)item;
									if (nameableitem.NameItem is not null && nameableitem.NameItem.Id is not null)
										IdToNameItemEmbedItem[nameableitem.NameItem.Id] = (INameable)item;
								}
								IdToParentEmbedItem[item.Id] = item.Parent;
							}
						}
					}
				}
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
				Console.WriteLine(e.StackTrace);
			}
		}
	}

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if (ProcessPageChange)
		{
			ProcessPageChange = false;
			UpdateItems();
		}
		else if (ProcessPageChangeForForms)
		{
			ProcessPageChangeForForms = false;
			RefreshRowComponents?.Invoke();
			RefreshRootItemComponents?.Invoke();
			RefreshItemComponents?.Invoke();
		}
		return base.OnAfterRenderAsync(firstRender);
	}

	public void UpdateItemComponents()
	{
		ProcessPageChangeForForms = true;
		StateHasChanged();
	}

	public void UpdateItems()
	{
		StateHasChanged();
		RefreshRowComponents?.Invoke();
		RefreshRootItemComponents?.Invoke();
		RefreshFormComponents?.Invoke();
		RefreshItemComponents?.Invoke();
		ProcessPageChangeForForms = true;
	}

	public void NextPage()
	{
		embed.NextPage();
		ProcessPageChange = true;
	}

	public void PrevPage()
	{
		embed.PrevPage();
		ProcessPageChange = true;
	}
}