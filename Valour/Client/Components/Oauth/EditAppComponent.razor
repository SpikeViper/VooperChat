@inherits Modal<EditAppComponent.ModalParams>
@using System.Net.Http.Headers
@inject IJSRuntime JsRuntime

<div class="modal-bg" style="text-align: center;">
    <h5>Editing</h5>
    <h4 class="name">@Data.App.Name</h4>
    <br/>
    <img alt="App Icon" src="@Data.App.ImageUrl" onclick="document.getElementById('upload-core').click()" class="icon" />

    <div style="display: none">
        <InputFile OnChange="@LoadFiles" AdditionalAttributes="@_inputAttributes"></InputFile>
    </div>

    <br/>

    <span id="result-span" style="display:block" class="text-info">@_iconOutput</span>
    <span id="error-span" style="display:block" class="text-danger">@_iconError</span>

    <br/>

    <code class="m-2 mb-4">App ID: @Data.App.Id</code>

    <p class="m-2 mb-4">Your app has been used @Data.App.Uses times.</p>

    <br />


    <div class="input-group" style="max-width: 400px;">
        <input class="form-control" @bind="_redirect" placeholder="Your redirect url..." />
        <button class="btn v-button" @onclick="OnClickRedirectUpdate">Apply</button>
    </div>

    @if (_redirectResult is not null)
    {
        if (_redirectResultError)
        {
            <span class="text-danger mb-4">@_redirectResult</span>
            <br />
        }
        else
        {
            <span class="text-info mb-4">@_redirectResult</span>
            <br />
        }
    }

    <br />

    <button class="btn v-button btn-copy" @onclick="@OnCopySecret"></button>
    <button class="btn v-button" @onclick="@OnClickDelete">Delete</button>
</div>

@code 
{
    public class ModalParams
    {
        public OauthApp App;
        public ViewAppsComponent ViewComponent;
    }
    
    private readonly Dictionary<string, object> _inputAttributes = new()
    {
        { "accept", ".png,.jpg,.jpeg,.gif" },
        { "id", "upload-core"}
    };

    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    private string _iconOutput = "";
    private string _iconError = "";

    private string _redirect;
    private string _redirectResult;
    private bool _redirectResultError;

    protected override void OnInitialized()
    {
        _redirect = Data.App.RedirectUrl;
    }

    private async Task OnClickRedirectUpdate()
    {
        Data.App.RedirectUrl = _redirect;

        var updateResult = await Valour.Sdk.Items.LiveModel.UpdateAsync(Data.App);

        Console.WriteLine(updateResult.Message);

        _redirectResultError = !updateResult.Success;

        if (updateResult.Success)
            _redirectResult = "Successfully updated!";
        else
            _redirectResult = updateResult.Message;

        StateHasChanged();
    }

    private void OnClickDelete(){
        var data = new ConfirmModalComponent.ModalParams(
            $"Delete {Data.App.Name}?",
            "This cannot be undone!",
            "Confirm",
            "Cancel",
            async () => {
                var res = await LiveModel.DeleteAsync(Data.App);

                if (res.Success)
                    _iconOutput = "Deleted.";
                else
                    _iconError = res.Message;

                StateHasChanged();
                Data.ViewComponent.Apps.Remove(Data.App);
                Data.ViewComponent.Refresh();
            },
            () => Task.CompletedTask
        );
        
        ModalRoot.OpenModal<ConfirmModalComponent>(data);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        _iconOutput = "";
        _iconError = "";

        //var file = await e.File.RequestImageFileAsync("jpeg", 256, 256);

        var file = e.File;

        if (file == null)
        {
            _iconError = "Could not load file as an image.";
        }

        if (file.Size > 10240000)
        {
            _iconError = "Max app icon size is 10mb.";
        }

        byte[] data = new byte[file.Size];

        await file.OpenReadStream(10240000).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(arrContent, file.Name, file.Name);

        var result = await Data.App.Node.PostAsyncWithResponse<string>($"upload/app/{Data.App.Id}", content);

        if (result.Success)
        {
            Data.App.ImageUrl = result.Data;
            _iconOutput = "Successfully changed app icon.";
        }
        else
        {
            _iconError = result.Message;
        }

        StateHasChanged();
    }

    public async Task OnCopySecret(){
        await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Data.App.Secret);
    }

}