@inject IJSRuntime JsRuntime
@inject IBlazorContextMenuService ContextService
@using Valour.Api.Models.Messages

<ContextMenu Id="message-context" CssClass="context" class='member-context'>
    <BlazorContextMenu.Item CssClass='context-item'>
        Copy
        <SubMenu CssClass="context-sub">
            <BlazorContextMenu.Item OnClick="@OnClickCopyText" CssClass="context-item">Text</BlazorContextMenu.Item>
            <BlazorContextMenu.Item OnClick="@OnClickCopyId" CssClass="context-item">Message Id</BlazorContextMenu.Item>
        </SubMenu>
    </BlazorContextMenu.Item>

    <BlazorContextMenu.Item OnClick="@OnClickReply" CssClass="context-item">
        Reply
    </BlazorContextMenu.Item>
    
    <BlazorContextMenu.Item OnClick="@OnClickReport" CssClass="context-item danger">
        Report
    </BlazorContextMenu.Item>

    @if (Message.AuthorUserId == ValourClient.Self.Id)
    {
        <BlazorContextMenu.Item OnClick="@OnClickEdit" CssClass="context-item">
            Edit
        </BlazorContextMenu.Item>
    }

    @if (DeletePermission == PermissionState.True)
    {
        <BlazorContextMenu.Item OnClick="@OnClickDelete" CssClass="context-item">
            Delete
        </BlazorContextMenu.Item>
    }

    @if (AuthorMember is not null)
    {
        <BlazorContextMenu.Item CssClass="context-item">
            Member
            <SubMenu CssClass="context-sub">
                <InnerMemberContextMenuComponent></InnerMemberContextMenuComponent>
            </SubMenu>
        </BlazorContextMenu.Item>
    }
</ContextMenu>


@code {

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public static MessageComponent MessageComponent { get; set; }

    public static Message Message { get; set; }

    public static PlanetMember AuthorMember { get; set; }

    public static PermissionState DeletePermission = PermissionState.False;

    public static async Task Initialize(Message message, ChatChannelWindowComponent window, MessageComponent component)
    {
        MessageComponent = component;
        Message = message;

        if (message.PlanetId is not null)
        {
            AuthorMember = await message.GetAuthorMemberAsync();
            await InnerMemberContextMenuComponent.Initialize(AuthorMember, window.Window);
        }
        else
        {
            AuthorMember = null;
        }

        // Console.WriteLine(window.Channel_Permissions.Code + " | " + window.Channel_Permissions.Mask);

        if (message.AuthorUserId == ValourClient.Self.Id)
        {
            DeletePermission = PermissionState.True;
        }
        else {
            if (AuthorMember is not null)
            {
                DeletePermission = window.ChannelPermissions.GetPermissionState(ChatChannelPermissions.ManageMessages);
            }
            else
            {
                DeletePermission = PermissionState.False;
            }
        }

        // Console.WriteLine(Can_Delete);
    }

    public async Task OnClickReply()
    {
        var input = MessageComponent.Holder.Window.Component.MessageHolder.InputComponent;
        await input.SetReplyMessage(Message);
    }

    public async Task OnClickDelete()
    {
        ConfirmModalData confirm = new("Delete message?", Message.Content, "Delete", "Cancel",
            async () =>
            {
                await Message.DeleteAsync();
            },
            async () =>
            {
                // Nothing
            }
        );

        ModalParameters par = new();
        par.Add("Data", confirm);

        Modal.Show<ConfirmModalComponent>("Delete Message", par);
    }

    private void OnClickReport()
    {
        var report = new Report()
        {
            ReportingUserId = ValourClient.Self.Id,
            MessageId = MessageComponent.Message.Id,
            ChannelId = MessageComponent.Message.ChannelId,
            PlanetId = MessageComponent.Message.PlanetId
        };
        
        ModalParameters par = new();
        par.Add("Report", report);
        
        Modal.Show<ReportModalComponent>("Report", par);
    }

    public async Task OnClickEdit()
    {
        await MessageComponent.OpenEditMode();
    }

	public async Task OnClickCopyText(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Message.Content);
	}

	public async Task OnClickCopyId(){
		await JsRuntime.InvokeVoidAsync("clipboardCopy.copyText", Message.Id);
	}
}
