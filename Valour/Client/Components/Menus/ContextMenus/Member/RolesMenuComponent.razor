@implements IDisposable

@foreach (var role in Roles)
{
	var cRole = role;
	var hasRole = MemberRoles.Any(x => x.Id == role.Id);

	<BlazorContextMenu.Item CssClass='context-model'>
		<div @onclick='(e => OnRoleClick(cRole, !hasRole))'>
			<p style="color:@role.Color; display: inline-block; margin: 0;">@role.Name</p>
			<input style='float: right; margin-left: 10px;' class="role-checkbox" type="checkbox"
			   checked="@hasRole" disabled />
		</div>
	</BlazorContextMenu.Item>
}

@code {
	[Parameter]
	public PlanetMember Member { get; set; }

	public List<PlanetRole> Roles { get; set; }
	public List<PlanetRole> MemberRoles { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Roles = await (await Member.GetPlanetAsync()).GetRolesAsync();
		MemberRoles = await Member.GetRolesAsync();

		ModelObserver<PlanetRole>.OnAnyUpdated += OnRoleUpdate;
		Member.OnRoleModified += OnMemberRoleUpdate;
	}

	void IDisposable.Dispose()
	{
		ModelObserver<PlanetRole>.OnAnyUpdated -= OnRoleUpdate;
		Member.OnRoleModified -= OnMemberRoleUpdate;
	}

	public async Task OnRoleUpdate(ModelUpdateEvent<PlanetRole> eventData)
	{
		var role = eventData.Model;
		if (Roles.Any(x => x.Id == role.Id))
			StateHasChanged();
	}

	public async Task OnRoleDeleted(PlanetRole role)
	{
		if (Roles.Any(x => x.Id == role.Id))
		{
			Roles.RemoveAll(x => x.Id == role.Id);
			MemberRoles.RemoveAll(x => x.Id == role.Id);
			StateHasChanged();
		}
	}

	public async Task OnRoleClick(PlanetRole role, bool value)
	{
		if (value)
			// Add role
			await Member.Node.PostAsync($"api/members/{Member.Id}/roles/{role.Id}", null);
		else
			// Remove role
			await Member.Node.DeleteAsync($"api/members/{Member.Id}/roles/{role.Id}");


		StateHasChanged();
	}

	public async Task OnMemberRoleUpdate(MemberRoleEvent eventData)
	{
		MemberRoles = await Member.GetRolesAsync();
		StateHasChanged();
	}
}
