@inherits Modal<ReportModalComponent.ModalParams>

<div class="report-modal glassy-modal">
    <div style="max-height: 40vh; overflow: auto">
        @switch (_page)
        {
            case 0:
            {
                <h2>Why are you reporting this content?</h2>
                <br/>
                @foreach (var reason in ReportReasons.Reasons)
                {
                    var r = reason;

                    <button class="btn v-btn large" style="width: 95%" @onclick="() => OnSelectReason(reason.Code)">
                        <h4>@reason.Title</h4>
                        <p>@reason.Description</p>
                    </button>
                    <br />
                }

                break;
            }
            case 1:
            {
                <h2>Describe the incident</h2>
                <br/>
                <textarea class="form-control" @bind="@Data.Report.LongReason" rows="5"></textarea>
                <br />
                <button style="text-align: center" class="btn v-btn large" @onclick="OnClickSubmitAsync">Submit Report</button>
                break;
            }
            case 2:
            {
                <h4>@_response</h4>
                break;
            }
        }
    </div>
    
    <br/>

    <button style="text-align: center" class="btn v-btn large" @onclick="@OnClickCancelAsync">Cancel</button>
</div>

@code {

    public class ModalParams
    {
        public Report Report;
    }

    private int _page = 0;
    private string _response = "";

    private void OnSelectReason(ReportReasonCode reasonCode)
    {
        Data.Report.ReasonCode = reasonCode;
        _page = 1;
        StateHasChanged();
    }

    private async Task OnClickSubmitAsync()
    {
        var result = await Report.PostReportAsync(Data.Report);
        if (!result.Success)
            _response = result.Message;
        else
            _response = "Report submitted successfully. Thank you for making Valour a safe place for our communities.";
        
        _page = 2;
        StateHasChanged();
    }
    
    private async Task OnClickCancelAsync()
    {
        await CloseAsync();
    }
}