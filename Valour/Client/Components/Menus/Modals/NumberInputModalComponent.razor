@inherits Modal<NumberInputModalComponent.ModalParams>

<!-- This modal exists to allow parts of the app to ask for a number -->

<div class="col-md-12">
	<section class="v-section" style="text-align: center; padding: 30px">
		<h4>@Data.Title</h4>
		<h5 class="subtitle">@Data.Description</h5>
		<br />
		<input type="number" step="1" min="0" max="1000000000000" class="v-input" @bind="_value" />
		
		<div @onclick="@OnCancel" class="v-btn d-inline-block">@Data.CancelText</div>
		<div @onclick="@OnConfirm" class="v-btn v-text-red d-inline-block">@Data.ConfirmText</div>
	</section>
</div>

@code {

	public class ModalParams
	{
		/// <summary>
		/// Run if the user hits "confirm"
		/// </summary>
		public Func<int, Task> ConfirmEvent;

		/// <summary>
		/// Run if the user hits "cancel"
		/// </summary>
		public Func<Task> CancelEvent;


		// Cosmetics
		public string Title { get; set; }
		public string Description { get; set; }
		public string ConfirmText { get; set; }
		public string CancelText { get; set; }

		public ModalParams()
		{
		}
    
		public ModalParams(string title, string desc, string confirm, string cancel, Func<int, Task> OnConfirm, Func<Task> OnCancel)
		{
			Title = title;
			Description = desc;
			ConfirmText = confirm;
			CancelText = cancel;

			ConfirmEvent = OnConfirm;
			CancelEvent = OnCancel;
		}
	}

	private int _value;

	private async Task OnConfirm()
	{
		if (Data.ConfirmEvent is not null)
			await Data.ConfirmEvent.Invoke(_value);

		await CloseAsync();
	}

	private async Task OnCancel()
	{
		if (Data.CancelEvent is not null)
			await Data.CancelEvent.Invoke();

		await CloseAsync();
	}
}
