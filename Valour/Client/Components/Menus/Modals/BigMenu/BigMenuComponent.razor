@inject HttpClient Http
@inject NavigationManager NavManager

<section class="bigmenu-section">
    <CascadingValue Value="this" IsFixed="true">
        <img class="escape-button" src="_content/Valour.Client/media/escape-button-icon.svg" @onclick="ClickEscape">
        <div class="inner">
            @if (DeviceInfo.IsMobile)
            {
                @if (ShowLeftSide)
                {
                    <div class="leftside">
                        @LeftSide
                    </div>
                }
                @if (ShowRightSide) 
                {
                    <div class="rightside">
                        <div class="inner-rightside">
                            @RightSide
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="leftside">
                    @LeftSide
                </div>
                <div class="rightside">
                    <div class="inner-rightside">
                        @RightSide
                    </div>
                    <div style="height: 200px" />
                </div>
            }
        </div>
    </CascadingValue>
</section>

@code {
    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }
    
    [Parameter]
    public string StartTopMenu { get; set; }
    
    [Parameter]
    public string StartSubMenu { get; set; }
    
    [Parameter]
    public RenderFragment LeftSide { get; set; }

    [Parameter]
    public RenderFragment RightSide { get; set; }

    public BigMenuSubMenuComponent SelectedSubMenu = null;

    public BigMenuTopLevelMenuComponent SelectedTopLevelMenu = null;

    public List<BigMenuTopLevelMenuComponent> TopLevelMenus = new();

    public bool ShowLeftSide = true;
    public bool ShowRightSide = false;

    public event Action RefreshRightSide;

    private bool _startSet = false;
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            SelectedTopLevelMenu = TopLevelMenus.First();
            SelectedSubMenu = SelectedTopLevelMenu.SubMenus.First();
            StateHasChanged();
            
            
        }

        if (!_startSet && TopLevelMenus.Any())
        {
            if (!string.IsNullOrWhiteSpace(StartTopMenu))
            {
                SetSelectedMenu(StartTopMenu, StartSubMenu);
            }

            _startSet = true;
        }
        
        return base.OnAfterRenderAsync(firstRender);
    }

    public void SetSelectedMenu(string top, string sub)
    {
        SelectedTopLevelMenu = TopLevelMenus.FirstOrDefault(x => x.Name == top);
        if (SelectedTopLevelMenu is not null)
            SelectedSubMenu = SelectedTopLevelMenu.SubMenus.FirstOrDefault(x => x.Name == sub);
        
        StateHasChanged();
    }
    
    public async Task ClickEscape(MouseEventArgs e)
    {
        if (!DeviceInfo.IsMobile || ShowLeftSide)
        {
            await ModalRoot.CloseTopModal();
            // await ModalInstance.CloseAsync();
        }
        else
        {
            ShowLeftSide = true;
            ShowRightSide = false;
        }
    }

    public void Update()
    {
        RefreshRightSide?.Invoke();
    }
}