<section>
    <img alt="escape" class="escape-button" src="_content/Valour.Client/media/escape-button-icon.svg" @onclick="ClickEscape">
    <div class="top-section">
        <h2 class="title">Create</h2>
        
        <span id="image-span" style="color:white; text-align: center">@_imageSpan</span>

        <div asp-validation-summary="All" class="text-info"></div>
        <div class="form-group mt-2 new-input-style">
            <label>Name</label>
            <input class="form-control" placeholder="Insert Name" @bind-value="@_name" />
        </div>
        <div style="margin-top:20px;">
            <img class="lock-icon" src="_content/Valour.Client/media/lock-icon.svg">
            <div class="perm-list-name mb-1">
                Private
            </div>
            <div type="button" style="float: right">
                <label class="switch">
                    <input type="checkbox" @onclick="PrivateSwitch" checked="@_isPrivate">
                    <span class="slider round"></span>
                </label>
            </div>
        </div>
    </div>

    @if (_isPrivate) {
        <div class="private">
            <div class="inner-private">
                <label style="margin-top: 12px;">Who has access to this?</label>
                <div class="roles-box">
                    @foreach (PlanetRole role in _roles)
                    {
                        <div class="role">
                           <div class="perm-list-name mb-1" style="color: @role.Color">
                                @role.Name
                            </div>
                            <div type="button" style="float: right">
                                <label class="switch">
                                    @if (role.GetAuthority() == SelfAuthority)
                                    {
                                        <input type="checkbox" @onclick="() => { SwitchRole(role); }" checked="@_selectedRoles[role]" disabled>
                                        <span class="slider round" cursor: not-allowed;></span>
                                    }
                                    else
                                    {
                                        <input type="checkbox" @onclick="() => { SwitchRole(role); }" checked="@_selectedRoles[role]">
                                        <span class="slider round"></span>
                                    }
                                </label>
                            </div> 
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    
    @if (_isPrivate)
    {
        <div class="form-group mt-4 bottom" style="margin-top: 0px !important;">
            <center>
                <button class="btn btn-primary mt-2" @onclick="OnClickSubmit">Create</button>
            </center>
        </div>
    }
    else
    {
        <div class="form-group mt-4 bottom">
            <center>
                <button class="btn btn-primary mt-2" @onclick="OnClickSubmit">Create</button>
            </center>
        </div>
    }
</section>

@code {

    // Input fields
    string _name;

    // Spans
    string _imageSpan = "";
    Dictionary<PlanetRole, bool> _selectedRoles = new();
    List<PlanetRole> _roles = new();
    bool _isPrivate = false;

    int SelfAuthority { get; set; }

    /// <summary>
    /// The type of channel to be created
    /// </summary>
    [Parameter, EditorRequired]
    public ChannelTypeEnum ChannelType { get; set; }
    
    [Parameter, EditorRequired]
    public Planet Planet { get; set; }

    [Parameter]
    public Channel Parent { get; set; }

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; }

    public async Task ClickEscape(MouseEventArgs e)
    {
        await ModalInstance.CloseAsync();
    }

    protected override async Task OnInitializedAsync() {
        _roles.Clear();
        _selectedRoles.Clear();

        PlanetMember selfMember = await ValourClient.GetSelfMember(Planet);

        var roles = await Planet.GetRolesAsync();

        SelfAuthority = await selfMember.GetAuthorityAsync();
        foreach (PlanetRole item in roles)
        {
            if (item.GetAuthority() > SelfAuthority)
                continue;

            _roles.Add(item);

            if (item.GetAuthority() == SelfAuthority)
                _selectedRoles.Add(item, true);
            else
                _selectedRoles.Add(item, false);
        }
        StateHasChanged();
    }

    private void SwitchRole(PlanetRole role)
    {
        _selectedRoles[role] = !_selectedRoles[role];
    }
    private void PrivateSwitch() {
        _isPrivate = !_isPrivate;
    }

    private async Task OnClickSubmit(MouseEventArgs e)
    {

        // Require a name
        if (string.IsNullOrWhiteSpace(_name))
        {
            _imageSpan = "Please input a category name!";
            return;
        }

        long planetId = Planet.Id;
        long? parentId = null;

        if (Parent != null)
            parentId = Parent.Id;

        long userId = ValourClient.Self.Id;
        //string token = ValourClient.Token;

        CreateChannelRequest createRequest = new()
        {
            Channel = new()
            {
                Name = _name,
                Description = "A category",
                ParentId = parentId,
                PlanetId = planetId,
                Position = -1,
                
                ChannelType = ChannelType
            },
            Nodes = new()
        };

        if (_isPrivate)
        {
            var defaultRoleId = (await Planet.GetDefaultRoleAsync()).Id;
            
            // set the default role channel view perms to false

            // only need category node for categories, but if it IS a category, we need every type of node
            
            bool doCategory = ChannelType == ChannelTypeEnum.PlanetCategory;
            bool doChat = ChannelType == ChannelTypeEnum.PlanetCategory ||
                          ChannelType == ChannelTypeEnum.PlanetChat;
            bool doVoice = ChannelType == ChannelTypeEnum.PlanetCategory ||
                           ChannelType == ChannelTypeEnum.PlanetVoice;

            if (doCategory)
            {
                PermissionsNode defCatNode = new()
                {
                    TargetId = 0,
                    PlanetId = planetId,
                    RoleId = defaultRoleId,
                    Mask = 0x00,
                    Code = 0x00,

                    TargetType = ChannelTypeEnum.PlanetCategory,
                };

                defCatNode.SetPermission(CategoryPermissions.View, PermissionState.False);

                createRequest.Nodes.Add(defCatNode);
            }

            if (doChat)
            {
                PermissionsNode defChatNode = new()
                {
                    TargetId = 0,
                    PlanetId = planetId,
                    RoleId = defaultRoleId,
                    Mask = 0x00,
                    Code = 0x00,

                    TargetType = ChannelTypeEnum.PlanetChat,
                };

                defChatNode.SetPermission(ChatChannelPermissions.View, PermissionState.False);

                createRequest.Nodes.Add(defChatNode);
            }

            if (doVoice)
            {
                PermissionsNode defVoiceNode = new()
                {
                    TargetId = 0,
                    PlanetId = Planet.Id,
                    RoleId = defaultRoleId,
                    Mask = 0x00,
                    Code = 0x00,
                    
                    TargetType = ChannelTypeEnum.PlanetVoice
                };

                defVoiceNode.SetPermission(VoiceChannelPermissions.Join, PermissionState.False);
                defVoiceNode.SetPermission(VoiceChannelPermissions.Speak, PermissionState.False);
                defVoiceNode.SetPermission(VoiceChannelPermissions.View, PermissionState.False);

                createRequest.Nodes.Add(defVoiceNode);
            }

            foreach (PlanetRole role in _roles)
            {
                if (!_selectedRoles[role])
                {
                    continue;
                }

                if (doCategory)
                {
                    PermissionsNode catNode = new()
                    {
                        TargetId = 0,
                        PlanetId = planetId,
                        RoleId = role.Id,
                        Mask = 0x00,
                        Code = 0x00,
                        TargetType = ChannelTypeEnum.PlanetCategory
                    };

                    catNode.SetPermission(CategoryPermissions.View, PermissionState.True);
                    createRequest.Nodes.Add(catNode);
                }

                if (doChat)
                {
                    PermissionsNode chatNode = new()
                    {
                        TargetId = 0,
                        PlanetId = planetId,
                        RoleId = role.Id,
                        Mask = 0x00,
                        Code = 0x00,
                        TargetType = ChannelTypeEnum.PlanetChat
                    };

                    chatNode.SetPermission(ChatChannelPermissions.View, PermissionState.True);
                    createRequest.Nodes.Add(chatNode);
                }

                if (doVoice)
                {
                    var voiceNode = new PermissionsNode()
                    {
                        TargetId = 0,
                        PlanetId = Planet.Id,
                        RoleId = role.Id,
                        Mask = 0x00,
                        Code = 0x00,
                        TargetType = ChannelTypeEnum.PlanetVoice
                    };

                    voiceNode.SetPermission(VoiceChannelPermissions.Join, PermissionState.True);
                    voiceNode.SetPermission(VoiceChannelPermissions.Speak, PermissionState.True);
                    voiceNode.SetPermission(VoiceChannelPermissions.View, PermissionState.True);

                    createRequest.Nodes.Add(voiceNode);
                }
            }
        }

        var result = await Channel.CreateWithDetails(createRequest);

        if (!result.Success)
        {
            var errorText = result.Message;
            Console.WriteLine(errorText);
            _imageSpan = errorText;
            return;
        }

        // close modal
        await ModalInstance.CloseAsync();
    }
}
