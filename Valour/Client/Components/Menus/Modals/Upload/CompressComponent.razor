@inherits Modal<CompressComponent.ModalParams>

<section class="outer">
    <div class="title-container">
        <h3>Compress Image <i class="bi bi-file-earmark-zip-fill"></i></h3>
        <p class="subtitle">Image is too large!</p>
    </div>
    @if (_result is not null)
    {
        <ResultLabel Result="@_result" />
    }
    else if (_loading)
    {
        <img alt="victor" class="victor" src="_content/Valour.Client/media/victor.svg" />
        <p class="victor-text">Compressing...</p>
    }
    else
    {
        @if (ValourClient.Self.SubscriptionType is not null)
        {
            <p class="inner">
                Your image is over the 20MB limit. You can hit the button below to compress the image. This will reduce the quality of the image, but it will make it sendable.
            </p>
        }
        else
        {
            <p class="inner">
                Your image is over the 10MB limit. You can hit the button below to compress the image. This will reduce the quality of the image, but it will make it sendable. You can also subscribe to Valour Plus to increase the limit to 20MB!
            </p>
        }
    }
    
    <div class="btns-wrapper">
        <button @onclick="@OnClickCloseAsync" class="v-btn">Close</button>
        @if (!_loading)
        {
            <button @onclick="@OnClickCompressAsync" class="v-btn">Compress</button>
        }
    </div>
</section>

@code {

    public class ModalParams
    {
        public IBrowserFile File;
        public InputComponent Input;
    }

    private ITaskResult _result;

    private bool _loading;

    private async Task OnClickCompressAsync()
    {
        _loading = true;
        StateHasChanged();
        
        var maxSize = 10240000;
        
        if (ValourClient.Self.SubscriptionType is not null)
        {
            maxSize = 20480000;
        }
        
        await Logger.Log("Attempting to compress image...", "cyan");

        try
        {
            var oldSize = Data.File.Size;
                            
            Data.File = await Data.File.RequestImageFileAsync("jpeg", 1000, 1000);

            if (Data.File is null)
            {
                _result = new TaskResult(false, "Browser is unable to compress image :(");
                StateHasChanged();
                return;
            }
                            
            if (Data.File.Size > maxSize)
            {
                _result = new TaskResult(false, "Compressed image is still too large :(");
                StateHasChanged();
                return;
            }
                            
            await Logger.Log($"New size: {Data.File.Size} / {oldSize}", "cyan");
            
            await Data.Input.ShowUploadMenu(Data.File.OpenReadStream(maxSize), MessageAttachmentType.Image, "image/jpeg", $"compressed-{Data.File.Name.Replace('.', '_')}.jpg", "image");
            
            // Everything worked, close the modal
            await CloseAsync();
        }
        catch (Exception ex)
        {
            _result = new TaskResult(false, "Failed to compress image :(" , ex.Message);
            await Logger.Log($"Failed to compress image: {ex.Message}", "red");
        }
    }

    private Task OnClickCloseAsync() => CloseAsync();
}