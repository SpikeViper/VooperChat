@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager NavManager

<div class="title-container">
	<h3>Basic Info <i class="bi bi-info-circle-fill"></i></h3>
	<p class="subtitle">Change your basic account settings</p>
</div>

<hr />

<div class="mt-4 mb-4">
    <h6>Your Status Message</h6>
    <div class="input-group" style="max-width: 400px;">
        <input class="form-control" placeholder="Choose a status..." @bind="Status" />
        <button class="btn v-button" @onclick="OnStatusApply">Apply</button>
    </div>
    @if (statusError)
    {
        <span class="text-danger">@statusResult</span>
    }
    else
    {
        <span class="text-info">@statusResult</span>
    }
</div>

<div class="mb-4">
    <h6>Your Status Code</h6>
    <div class="input-group" style="max-width: 400px;">
        <InputSelect class="form-select" @bind-Value="StatusCode">
            <option value="0">Automatic</option>
            <option value="4">Online</option>
            <option value="2">Away</option>
            <option value="3">Do Not Disturb</option>
            <option value="1">Offline</option>
        </InputSelect>
        <button class="btn v-button" @onclick="OnStatusCodeApply">Apply</button>
    </div>
    @if (statusCodeError)
    {
        <span class="text-danger">@statusCodeResult</span>
    }
    else
    {
        <span class="text-info">@statusCodeResult</span>
        <br />
    }
</div>

<div class="mb-4">
    <h6>Your tag</h6>
    <div class="input-group" style="max-width: 400px;">
        <input class="form-control" placeholder="Tag" @bind="@_tag" maxlength="4" />
        <button class="btn v-button" @onclick="@OnTagApply">Apply</button>
    </div>
    <ResultLabel Result="@_tagChangeResult" />
</div>
<div class="mt-4 mb-4">
    <h6>Profile Image (pfp)</h6>
    <img style="width:128px; border:solid 4px black; margin: 5px; border-radius: 5px;" src="@Pfp_Url" @onerror="OnPfpError" />
    <div style="display:inline-block">
        <InputFile OnChange="LoadFiles" AdditionalAttributes="@InputAttributes"></InputFile>
        <span id="result-span" style="display:block" class="text-info">@Pfp_Output</span>
        <span id="error-span" style="display:block" class="text-danger">@Pfp_Error</span>
    </div>
</div>

<br/>

<h3>DANGER ZONE</h3>
<button class="v-btn" @onclick="OnClickDeleteAccount">Delete my account</button>
<br/>
<br/>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }
    
    [Parameter]
    public User User { get; set; }
    
    private string _tag { get; set; }
    private ITaskResult _tagChangeResult;

    public string Pfp_Url { get; set; }

    public string Pfp_Output = "";
    public string Pfp_Error = "";

    public string Status { get; set; }
    public bool statusError;
    public string statusResult;

    public int StatusCode { get; set; }
    public bool statusCodeError;
    public string statusCodeResult;

    Dictionary<string, object> InputAttributes = new Dictionary<string, object>()
    {
        { "accept", ".png,.jpg,.jpeg,.gif" }
    };

    private async Task OnStatusApply()
    {
        User.Status = Status;
        var result = await Valour.Api.Items.LiveModel.UpdateAsync(User);
        statusError = !result.Success;

        if (statusError)
            statusResult = result.Message;
        else
            statusResult = "Updated successfully.";

        StateHasChanged();
    }
    
    private async Task OnTagApply()
    {
        if (_tag.Length != 4)
        {
            _tagChangeResult = new TaskResult(false, "Tag must be 4 characters long.");
            StateHasChanged();
            return;
        }

        foreach (var c in _tag)
        {
            if (!char.IsLetterOrDigit(c))
            {
                _tagChangeResult = new TaskResult(false, "Tag must be alphanumeric.");
                StateHasChanged();
                return;
            }
        }
        
        User.Tag = _tag;
        _tagChangeResult = await LiveModel.UpdateAsync(User);
        
        StateHasChanged();
    }

    private async Task OnStatusCodeApply()
    {
        User.UserStateCode = StatusCode;
        var result = await Valour.Api.Items.LiveModel.UpdateAsync(User);
        statusCodeError = !result.Success;

        if (statusCodeError)
            statusCodeResult = result.Message;
        else
            statusCodeResult = "Updated successfully.";

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        Pfp_Url = User.PfpUrl;
        Status = User.Status;
        StatusCode = User.UserStateCode;
        _tag = User.Tag;
    }

    protected async Task OnPfpError()
    {
        Pfp_Url = "_content/Valour.Client/icon-512.png";

        StateHasChanged();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        Pfp_Output = "";
        Pfp_Error = "";

        //var file = await e.File.RequestImageFileAsync("jpeg", 256, 256);

        var file = e.File;

        if (file == null)
        {
            Pfp_Error = "Could not load file as an image.";
        }

        if (file.Size > 2621440)
        {
            Pfp_Error = "Max profile image size is 2mb.";
        }

        byte[] data = new byte[file.Size];

        await file.OpenReadStream(2621440).ReadAsync(data);

        var content = new MultipartFormDataContent();
        var arrContent = new ByteArrayContent(data);
        arrContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

        content.Add(arrContent, file.Name, file.Name);

        var result = await ValourClient.PrimaryNode.PostAsyncWithResponse<string>($"upload/profile", content);

        if (result.Success)
        {
            Pfp_Url = result.Data;
            Pfp_Output = "Successfully changed profile picture.";
        }
        else
        {
            Pfp_Error = result.Message;
        }

        StateHasChanged();
    }

    private void OnClickDeleteAccount()
    {
        Modal.Show<DeleteAccountModal>("Delete Account");
    }
}