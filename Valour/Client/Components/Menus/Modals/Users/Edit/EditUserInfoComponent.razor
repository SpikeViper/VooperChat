@using System.Net.Http.Headers
@inject HttpClient Http
@inject NavigationManager NavManager

<div class="title-container">
	<h3>Basic Info <i class="bi bi-info-circle-fill"></i></h3>
	<p class="subtitle">Change your basic account settings</p>
</div>

<hr />

<div class="mt-4 mb-4">
    <h6>Your Status Message</h6>
    <div class="input-group" style="max-width: 400px;">
        <input class="form-control" placeholder="Choose a status..." @bind="_status" />
        <button class="btn v-button" @onclick="OnStatusApply">Apply</button>
    </div>
    <ResultLabel Result="@_statusChangeResult" />
</div>

<div class="mb-4">
    <h6>Your Status Code</h6>
    <div class="input-group" style="max-width: 400px;">
        <InputSelect class="form-select" @bind-Value="_statusCode">
            <option value="0">Automatic</option>
            <option value="4">Online</option>
            <option value="2">Away</option>
            <option value="3">Do Not Disturb</option>
            <option value="1">Offline</option>
        </InputSelect>
        <button class="btn v-button" @onclick="OnStatusCodeApply">Apply</button>
    </div>
    <ResultLabel Result="@_statusCodeChangeResult" />
</div>

<div class="mb-4">
    <h6>Your tag</h6>
    <div class="input-group" style="max-width: 400px;">
        <input class="form-control" placeholder="Tag" @bind="@_tag" maxlength="4" />
        <button class="btn v-button" @onclick="@OnTagApply">Apply</button>
    </div>
    <ResultLabel Result="@_tagChangeResult" />
</div>
<div class="mt-4 mb-4">
    <h6>Profile Image (pfp)</h6>
    <img alt="Your profile picture" style="width:128px; border:solid 4px black; margin: 5px; border-radius: 5px;" src="@_pfpUrl" @onerror="OnPfpError" />
    <div style="display:inline-block">
        <InputFile OnChange="@LoadFiles" AdditionalAttributes="@_inputAttributes"></InputFile>
        <ResultLabel Result="@_pfpChangeResult" />
    </div>
</div>

<br/>

<h3>DANGER ZONE</h3>
<button class="v-btn" @onclick="OnClickDeleteAccount">Delete my account</button>
<br/>
<br/>

@code {
    [CascadingParameter]
    public IModalService Modal { get; set; }
    
    [Parameter]
    public User User { get; set; }

    private string _tag;
    private ITaskResult _tagChangeResult;

    private string _pfpUrl;
    private ITaskResult _pfpChangeResult;

    private string _status;
    private ITaskResult _statusChangeResult;

    private int _statusCode;
    private ITaskResult _statusCodeChangeResult;

    private static Dictionary<string, object> _inputAttributes = new ()
    {
        { "accept", ".png,.jpg,.jpeg,.gif" }
    };

    private async Task OnStatusApply()
    {
        var oldStatus = User.Status;
        User.Status = _status;
        _statusChangeResult = await Valour.Api.Items.LiveModel.UpdateAsync(User);
        
        // Rollback change if it failed
        if (!_statusChangeResult.Success)
        {
            User.Status = oldStatus;
        }

        StateHasChanged();
    }
    
    private async Task OnTagApply()
    {
        if (_tag.Length != 4)
        {
            _tagChangeResult = new TaskResult(false, "Tag must be 4 characters long.");
            StateHasChanged();
            return;
        }

        foreach (var c in _tag)
        {
            if (!char.IsLetterOrDigit(c))
            {
                _tagChangeResult = new TaskResult(false, "Tag must be alphanumeric.");
                StateHasChanged();
                return;
            }
        }
        
        var oldTag = User.Tag;
        User.Tag = _tag;
        _tagChangeResult = await LiveModel.UpdateAsync(User);
        
        // Rollback change if it failed
        if (!_tagChangeResult.Success)
        {
            User.Tag = oldTag;
        }
        
        StateHasChanged();
    }

    private async Task OnStatusCodeApply()
    {
        var oldStatusCode = User.UserStateCode;
        User.UserStateCode = _statusCode;
        _statusCodeChangeResult = await Valour.Api.Items.LiveModel.UpdateAsync(User);
       
        // Rollback change if it failed
        if (!_statusCodeChangeResult.Success)
        {
            User.UserStateCode = oldStatusCode;
        }

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _pfpUrl = User.PfpUrl;
        _status = User.Status;
        _statusCode = User.UserStateCode;
        _tag = User.Tag;
    }

    private void OnPfpError()
    {
        _pfpUrl = "_content/Valour.Client/icon-512.png";
        StateHasChanged();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var file = e.File;
        
        // 10mb limit
        if (file.Size > 10240000)
        {
            _pfpChangeResult = new TaskResult(false, "Max profile image size is 10mb.");
            StateHasChanged();
            return;
        }
        
        var streamContent = new StreamContent(file.OpenReadStream(10240000));
        var content = new MultipartFormDataContent();
        streamContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);
        content.Add(streamContent, file.Name, file.Name);
        
        var result = await ValourClient.PrimaryNode.PostAsyncWithResponse<string>($"upload/profile", content);
        _pfpChangeResult = result;
        
        if (_pfpChangeResult.Success)
        {
            User.PfpUrl = result.Data;
            _pfpUrl = result.Data;
        }
        
        StateHasChanged();
    }

    private void OnClickDeleteAccount()
    {
        Modal.Show<DeleteAccountModal>("Delete Account");
    }
}