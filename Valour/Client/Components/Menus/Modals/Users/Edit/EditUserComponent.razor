@inherits Modal<EditUserComponent.ModalParams>
@inject NavigationManager NavManager


@if (@Data.User is null)
{
    <div class="background">
        <h5>Loading user...</h5>
    </div>
    return;
}

<BigMenuComponent StartTopMenu="@Data.StartTopMenu" StartSubMenu="@Data.StartSubMenu" @ref="BigMenu">
    <LeftSide>
        <section>
            <p class="user-settings">USER SETTINGS</p>

            <div class="menu">
                <BigMenuTopLevelMenuComponent Icon="gear-fill" Name="General Settings">
                    <BigMenuSubMenuComponent Icon="info-circle-fill" Name="Info"></BigMenuSubMenuComponent>
                    <BigMenuSubMenuComponent Icon="person-fill" Name="Profile"></BigMenuSubMenuComponent>
                    <BigMenuSubMenuComponent Icon="person-heart" Name="Friends"></BigMenuSubMenuComponent>
                    <BigMenuSubMenuComponent Icon="rocket-takeoff-fill" Name="Subscriptions"></BigMenuSubMenuComponent>
                    <BigMenuSubMenuComponent Icon="envelope-paper-heart-fill" Name="Referrals"></BigMenuSubMenuComponent>
                    <BigMenuSubMenuComponent Icon="sign-stop-lights-fill" Name="Permissions"></BigMenuSubMenuComponent>
                    <BigMenuSubMenuComponent Icon="phone-fill" Name="Device Preferences"></BigMenuSubMenuComponent>
                    @if (ValourClient.Self.ValourStaff)
                    {
                        <BigMenuSubMenuComponent Icon="bi-hammer" Name="Staff Tools"></BigMenuSubMenuComponent>
                    }
                    <BigMenuSubMenuComponent Icon="x-octagon-fill" Name="Log Out"></BigMenuSubMenuComponent>
                </BigMenuTopLevelMenuComponent>
            </div>
        </section>
    </LeftSide>
    <RightSide>
        @switch (BigMenu.SelectedTopLevelMenu?.Name)
        {
            case "General Settings":
                switch (BigMenu.SelectedSubMenu.Name)
                {
                    case "Info":
                        <EditUserInfoComponent User="@Data.User"></EditUserInfoComponent>
                        break;
                    case "Profile":
                        <EditProfileComponent></EditProfileComponent>
                        break;
                    case "Permissions":
                        <EditUserNotificationsComponent></EditUserNotificationsComponent>
                        break;
                    case "Device Preferences":
                        <EditDevicePreferencesComponent></EditDevicePreferencesComponent>
                        break;
                    case "Subscriptions":
                        <EditSubscriptionsComponent></EditSubscriptionsComponent>
                        break;
                    case "Referrals":
                        <EditReferralsComponent></EditReferralsComponent>
                        break;
                    case "Friends":
                        <EditFriendsComponent></EditFriendsComponent>
                        break;
                    case "Log Out":
                        LogOut();
                        break;
                        
                }
                break;
        }
    </RightSide>
</BigMenuComponent>

@code {
    public class ModalParams
    {
        public User User;
        public string StartTopMenu;
        public string StartSubMenu;
    }

    private BigMenuComponent BigMenu { get; set; }

    public void Dispose()
    {
        BigMenu.RefreshRightSide -= Refresh;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            BigMenu.RefreshRightSide += Refresh;
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async void Refresh()
    {
        if (BigMenu.SelectedSubMenu?.Name == "Log Out")
        {
            await LogOut();
        }
        else
        {
            StateHasChanged();
        }
    }

    private async Task LogOut()
    {
        var response = await ValourClient.PrimaryNode.PostAsync($"api/users/self/logout", null);

        Console.WriteLine(response.Message);

        NavManager.NavigateTo("/", true);
    }
}