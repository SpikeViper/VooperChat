@implements IDisposable

<div class="col-md-12 modal-bg">
	<section>
		<div class="title-container">
			<h3>Friends <i class="bi bi-person-heart"></i></h3>
			<p class="subtitle">ADD OR REMOVE FRIENDS</p>
        </div>

		<hr />

		<h5>Added you</h5>
		<div class="inner-scroll-box">
			@foreach (var addedMe in ValourClient.FriendRequests)
			{
				<div class="request-row">
					<UserInfoComponent User="@addedMe" />

					<div class="action-row" role="group" aria-label="Friend Accept or Deny">
						<button @onclick="async () => await OnAcceptRequest(addedMe)" type="button" class="v-btn">Accept</button>
						<button @onclick="async () => await OnDeclineRequest(addedMe)" type="button" class="v-btn">Decline</button>
					</div>
				</div>
			}
		</div>
		<span class="text-danger mb-2">@_addedYouError</span>

		<h5 style="margin-top: 20px">You added</h5>
		<div class="inner-scroll-box">
			@foreach (var added in ValourClient.FriendsRequested)
			{
				<div class="request-row">
					<UserInfoComponent User="@added" />

					<div class="action-row" role="group" aria-label="Friend Accept or Deny">
						<button @onclick="async () => await OnCancelRequest(added)" type="button" class="v-btn">Cancel</button>
					</div>
				</div>
			}
		</div>
		<span class="text-danger mb-2">@_addedError</span>


		<div asp-validation-summary="All" class="text-info"></div>

		<div class="form-group mt-4">
			<label>Friend's Username</label>
			<input class="form-control" @bind-value="@_name" />
			<span id="name-span" style="color:#888888">@_nameSpan</span>
		</div>


		@if (!string.IsNullOrEmpty(_errorSpan))
		{
			<br />
			<span class="text-danger mt-4 mb-4">@_errorSpan</span>
		}

		<div class="d-flex form-group mt-4" style="align-items: center">
			<button class="v-btn mt-1 mb-2" @onclick="OnClickSubmit">Add Friend</button>
			@if (!string.IsNullOrWhiteSpace(_successSpan))
			{
				<span class="text-info" style="display: inline-block; margin-left: 15px;">@_successSpan</span>
			}
		</div>
	</section>
</div>

@code {
	// Input fields
	private string _name;

	// Spans
	private string _nameSpan = "The username of your friend";

	private string _errorSpan = null;
	private string _successSpan = null;

	private string _addedYouError = null;
	private string _addedError = null;

	[Parameter]
	public ClientWindow Window { get; set; }

	[CascadingParameter]
	public BlazoredModalInstance ModalInstance { get; set; }

	protected override void OnInitialized()
	{
		ValourClient.OnFriendEvent += FriendEventHandler;
	}
	
	void IDisposable.Dispose()
	{
		ValourClient.OnFriendEvent -= FriendEventHandler;
	}

	private async Task FriendEventHandler(FriendEventData eventData)
	{
		StateHasChanged();
	}

	private async Task OnClickSubmit(MouseEventArgs e)
	{
		// Require a name
		if (string.IsNullOrWhiteSpace(_name))
		{
			_errorSpan = "Please input a username.";
			return;
		}

		var response = await ValourClient.AddFriendAsync(_name);

		if (!response.Success)
		{
			_errorSpan = response.Message;
			StateHasChanged();
			return;
		}

		_successSpan = "Added friend successfully.";
	}

	private async Task OnAcceptRequest(User user)
	{
		_addedYouError = "";

		var result = await ValourClient.AddFriendAsync(user.NameAndTag);
		if (!result.Success){
			_addedYouError = result.Message;
		}

		StateHasChanged();
	}

	private async Task OnDeclineRequest(User user)
	{
		_addedYouError = "";

		var result = await ValourClient.DeclineFriendAsync(user.NameAndTag);
		if (!result.Success)
		{
			_addedYouError = result.Message;
		}

		StateHasChanged();
	}

	private async Task OnCancelRequest(User user)
	{
		_addedError = "";

		var result = await ValourClient.CancelFriendAsync(user.NameAndTag);
		if (!result.Success)
		{
			_addedError = result.Message;
		}

		StateHasChanged();
	}
}