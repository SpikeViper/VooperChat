@inject IJSRuntime JsRuntime
@inject ValourClient Client

<h3>Notification Settings</h3>

<div class="perm-list-item">
    <div class="perm-list-name mb-1">
        Enable Push Notifications
    </div>
    <div type="button" style="float:right">
        <label class="switch">
            <input type="checkbox" @onclick="OnNotificationsClick" checked="@_notificationsEnabled" disabled="@_notificationsBlocked">
            <span class="slider round"></span>
        </label>
    </div>
    <div class="perm-list-desc mt-1">
        This will allow your device to recieve push notifications.
    </div>
</div>

@code {

    public string NotificationState = "null";
    private bool _notificationsEnabled = false;
    private bool _notificationsBlocked = false;

    private Notifications.PushNotificationSubscription _subscription = null;

    protected override async Task OnInitializedAsync()
    {
        _notificationsEnabled = await JsRuntime.InvokeAsync<bool>("blazorPushNotifications.hasNotifications");
        _subscription = await JsRuntime.InvokeAsync<Notifications.PushNotificationSubscription>("blazorPushNotifications.requestSubscription", false);

        if (_subscription != null)
        {
            _notificationsEnabled = true;
        }

        // Client.Logger.Log<EditUserNotificationsComponent>(_subscription., "cyan");

        StateHasChanged();
    }

    private async Task OnNotificationsClick()
    {
        if (_notificationsEnabled)
        {
            var sub = await JsRuntime.InvokeAsync<Notifications.PushNotificationSubscription>("blazorPushNotifications.removeSubscription");
            _notificationsEnabled = false;

            await Client.PrimaryNode.PostAsync("api/notification/unsubscribe", sub);
        }
        else
        {
            _subscription = await JsRuntime.InvokeAsync<Notifications.PushNotificationSubscription>("blazorPushNotifications.requestSubscription");

            if (_subscription != null)
            {
                _notificationsEnabled = true;
                await Client.PrimaryNode.PostAsync($"api/notification/subscribe", _subscription);
            }
        }

        StateHasChanged();
    }
}