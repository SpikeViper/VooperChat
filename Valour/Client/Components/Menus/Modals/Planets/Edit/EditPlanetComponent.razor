@inherits Modal<EditPlanetComponent.ModalParams>
@implements IDisposable

@if (Data.Planet is null)
{
    <h5>Loading planet details...</h5>
    return;
}

<BigMenuComponent @ref="BigMenuComponent">
    <LeftSide>
        <EditPlanetMenuComponent Planet="@Data.Planet"></EditPlanetMenuComponent>
    </LeftSide>
    <RightSide>
        @switch (BigMenuComponent.SelectedTopLevelMenu?.Name)
        {
            case "General Settings":
                switch (BigMenuComponent.SelectedSubMenu.Name)
                {
                    case "Info":
                        <EditPlanetInfoComponent Planet="@Data.Planet"></EditPlanetInfoComponent>
                        break;
                    case "Invites":
                        <EditPlanetInvitesComponent Planet="@Data.Planet"></EditPlanetInvitesComponent>
                        break;
                    case "Members":
                        <EditPlanetUsersComponent></EditPlanetUsersComponent>
                        break;
                    case "Bans":
                        <EditPlanetBansComponent></EditPlanetBansComponent>
                        break;
                    case "Roles":
                        <EditPlanetRolesComponent Planet="@Data.Planet"></EditPlanetRolesComponent>
                        break;
                    case "Economy":
                        <EditPlanetEconomyComponent Planet="@Data.Planet"></EditPlanetEconomyComponent>
                        break;
                    case "Delete":
                        break;
                }
                break;
        }
    </RightSide>
</BigMenuComponent>

@code {

    public class ModalParams
    {
        public Planet Planet;
    }

    private BigMenuComponent BigMenuComponent { get; set; }

    public void Dispose()
    {
        BigMenuComponent.RefreshRightSide -= Refresh;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            BigMenuComponent.RefreshRightSide += Refresh;
        }
        
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        // Fallback on focused planet if no planet is provided
        if (Data is null || Data.Planet is null)
        {
            Data = new ModalParams()
            {
                Planet = GlobalWindowData.GlobalActivePlanet
            };
        } 
    }

    private void Refresh()
    {
        if (BigMenuComponent.SelectedSubMenu?.Name == "Delete")
        {
            OnClickDelete();
        }
        else
        {
            StateHasChanged();
        }
    }

    private void OnClickDelete()
    {
        var modalData =
        new ConfirmModalComponent.ModalParams(
            $"Delete {Data.Planet.Name}?",
            "Are you sure?",
            "Continue",
            "Cancel",
            async () =>
            {
                Console.WriteLine("Confirmed planet deletion.");
                var result = await LiveModel.DeleteAsync(Data.Planet);

                if (result.Success)
                {
                    await CloseAsync();
                }
            },
            () => Task.CompletedTask
        );
        
        ModalRoot.OpenModal<ConfirmModalComponent>(modalData);
    }
}