@inject WindowManager WindowManager
@implements IDisposable

@if (Planet is null)
{
    <h5>Loading planet details...</h5>
    return;
}

<BigMenuComponent @ref="BigMenuComponent">
    <LeftSide>
        <EditPlanetMenuComponent Planet="@Planet"></EditPlanetMenuComponent>
    </LeftSide>
    <RightSide>
        @switch (BigMenuComponent.SelectedTopLevelMenu?.Name)
        {
            case "General Settings":
                switch (BigMenuComponent.SelectedSubMenu.Name)
                {
                    case "Info":
                        <EditPlanetInfoComponent Planet="Planet"></EditPlanetInfoComponent>
                        break;
                    case "Invites":
                        <EditPlanetInvitesComponent Planet="Planet"></EditPlanetInvitesComponent>
                        break;
                    case "Members":
                        <EditPlanetUsersComponent></EditPlanetUsersComponent>
                        break;
                    case "Bans":
                        <EditPlanetBansComponent></EditPlanetBansComponent>
                        break;
                    case "Roles":
                        <EditPlanetRolesComponent Planet="Planet"></EditPlanetRolesComponent>
                        break;
                    case "Economy":
                        <EditPlanetEconomyComponent Planet="Planet"></EditPlanetEconomyComponent>
                        break;
                    case "Delete":
                        break;
                }
                break;
        }
    </RightSide>
</BigMenuComponent>

@code {
    [Parameter]
    public Planet Planet { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    [CascadingParameter]
    public BlazoredModalInstance ModalInstance { get; set; }

    private BigMenuComponent BigMenuComponent { get; set; }

    public void Dispose()
    {
        BigMenuComponent.RefreshRightSide -= Refresh;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            BigMenuComponent.RefreshRightSide += Refresh;
        }
        
        return base.OnAfterRenderAsync(firstRender);
    }

    protected override void OnInitialized()
    {
        Planet = WindowManager.FocusedPlanet;
    }

    private void Refresh()
    {
        if (BigMenuComponent.SelectedSubMenu?.Name == "Delete")
        {
            OnClickDelete();
        }
        else
        {
            StateHasChanged();
        }
    }

    private void OnClickDelete()
    {
        ConfirmModalData modalData =
        new($"Delete {Planet.Name}?",
                "Are you sure?",
                "Continue",
                "Cancel",
                async () =>
                {
                    Console.WriteLine("Confirmed planet deletion.");
                    var result = await Valour.Api.Items.LiveModel.DeleteAsync(Planet);

                    if (result.Success)
                    {
                        await ModalInstance.CloseAsync();
                    }
                },
                async () =>
                {
                    Console.WriteLine("Cancelled channel item deletion.");
                }
        );

        ModalParameters modParams = new();
        modParams.Add("Data", modalData);

        Modal.Show<ConfirmModalComponent>("Confirm", modParams);
    }
}