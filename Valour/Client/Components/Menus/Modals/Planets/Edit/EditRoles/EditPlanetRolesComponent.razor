@inject IJSRuntime JsRuntime

<h3>Edit Roles <i class="bi bi-tag-fill"></i></h3>
<p class="subtitle">PLANET SETTINGS</p>

<div class="settings-inner" id="edit-inner-settings">

    @{
        var editStyle = _editMode ? string.Empty : "display: none";
    }

    <div style="@editStyle">
        <div class="rolecreate-cont">
            <div class="form-group mt-2">
                <label>Role Name</label>
                <input class="form-control" @bind-value="@_role.Name"/>
                <span id="rolename-span" class="text-danger">@_roleNameSpan</span>
            </div>
            <div class="form-group mt-2" style="margin-left: 8px">
                <label>Color</label>
                <div class="color-wrapper">
                    <input type="color" class="form-control color-picker" value="@_role.Color" @oninput="@OnColorChange" />
                </div>
            </div>

        </div>
        <div class="mt-2" style="display: block">
            <div class="btn-role-edit create" style="margin-left: 0px" @onclick="@OnClickSave" id="role-save-button">
                <p class="center-t">
                    @(_role.Id == 0 ? "Create" : "Save")
                </p>
            </div>
            <div class="mt-2">
                <ResultLabel Result="@_result" />
            </div>
        </div>

        <br/>
        <hr/>
        <br/>


        <!-- Note: We start at one for all the permissions to skip the 'full control' permission  -->

        <p class="subtitle">PLANET PERMISSIONS</p>
        <div class="perm-section">
            
            <div class="perm-list-item">
                <div class="perm-list-name mb-1">
                    Administrator
                </div>
                <div type="button" class="perm-switch">
                    <label class="switch">
                        <input 
                            type="checkbox" 
                            @onclick="OnClickAdmin" 
                            checked="@_role.IsAdmin"
                        />
                        <span class="slider round"></span>
                    </label>
                </div>
                <div class="perm-list-desc mt-1">
                    If true, a member has all permissions in the planet and on every channel in the planet. Grant cautiously.
                </div>
            </div>
            
            <div class="perm-list-item">
                <div class="perm-list-name mb-1">
                    Mentionable
                </div>
                <div type="button" class="perm-switch">
                    <label class="switch">
                        <input 
                            type="checkbox" 
                            @onclick="OnClickCanMention" 
                            checked="@_role.AnyoneCanMention"
                        />
                        <span class="slider round"></span>
                    </label>
                </div>
                <div class="perm-list-desc mt-1">
                    If true, any member can mention this role in chat. Set cautiously.
                </div>
            </div>
            
            @for (int i = 1; i < PlanetPermissions.Permissions.Length; i++)
            {
                var planetPerm = PlanetPermissions.Permissions[i];

                <div class="perm-list-item">
                    <div class="perm-list-name mb-1">
                        @planetPerm.Name
                    </div>
                    <div type="button" class="perm-switch">
                        <label class="switch">
                            <input
                                type="checkbox"
                                @onclick="(e => PermClick(planetPerm.Value, ref _rolePlanetPerms))"
                                checked="@((_rolePlanetPerms & planetPerm.Value) != 0)"/>
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="perm-list-desc mt-1">
                        @planetPerm.Description
                    </div>
                </div>
            }
        </div>

        <p class="subtitle">CATEGORY PERMISSIONS</p>
        <div class="perm-section">
            @for (int i = 1; i < CategoryPermissions.Permissions.Length; i++)
            {
                var categoryPerm = CategoryPermissions.Permissions[i];

                <div class="perm-list-item">
                    <div class="perm-list-name mb-1">
                        @categoryPerm.Name
                    </div>
                    <div type="button" class="perm-switch">
                        <label class="switch">
                            <input type="checkbox"
                               @onclick="@(e => PermClick(categoryPerm.Value, ref _roleCategoryPerms))"
                                   checked="@((_roleCategoryPerms & categoryPerm.Value) != 0)" />
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="perm-list-desc mt-1">
                        @categoryPerm.Description
                    </div>
                </div>
            }
        </div>

        <p class="subtitle">CHAT CHANNEL PERMISSIONS</p>
        <div class="perm-section">
            @for (int i = 1; i < ChatChannelPermissions.Permissions.Length; i++)
            {
                var chatPerm = ChatChannelPermissions.Permissions[i];

                <div class="perm-list-item">
                    <div class="perm-list-name mb-1">
                        @chatPerm.Name
                    </div>
                    <div type="button" class="perm-switch">
                        <label class="switch">
                            <input 
                                type="checkbox" 
                                @onclick="@(e => PermClick(chatPerm.Value, ref _rolePlanetPerms))" 
                                checked="@((_roleChatPerms & chatPerm.Value) != 0)"
                            />
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="perm-list-desc mt-1">
                        @chatPerm.Description
                    </div>
                </div>
            }
        </div>

        <p class="subtitle">VOICE CHANNEL PERMISSIONS</p>
        <div class="perm-section">
            @for (int i = 1; i < VoiceChannelPermissions.Permissions.Length; i++)
            {
                var voicePerm = VoiceChannelPermissions.Permissions[i];

                <div class="perm-list-item">
                    <div class="perm-list-name mb-1">
                        @voicePerm.Name
                    </div>
                    <div type="button" class="perm-switch">
                        <label class="switch">
                            <input type="checkbox"
                               @onclick="@(e => PermClick(voicePerm.Value, ref _roleVoicePerms))"
                                   checked="@((_roleVoicePerms & voicePerm.Value) != 0)" />
                            <span class="slider round"></span>
                        </label>
                    </div>
                    <div class="perm-list-desc mt-1">
                        @voicePerm.Description
                    </div>
                </div>
            }
        </div>

        <button @onclick='() => DeleteRole(_selected)' class="mt-4 btn v-button danger">Delete this role</button>
    </div>

    @{
        string normStyle = "display: none";
        if (!_editMode)
        {
            normStyle = "";
        }
    }


    <div id="edit-rows-container" style="@normStyle">

        <p class="help-text">Use roles to assign permissions and group planet members.</p>

        <div class="form-group mt-2">
            <input class="form-control" placeholder="Search Roles" @bind="@_searchRolesValue" @bind:event="oninput" />
        </div>
        
        <button class="btn btn-primary mt-2" @onclick="OnClickCreateMode">Create Role</button>

        <p class="help-text">Keep in mind the highest role a user has is the color they will appear as. Drag roles to reorder them</p>

        <div class="role-list-div-help-text">
            <p class="help-text" style="display: inline-block;margin-bottom: 10px;">Roles: @_roles.Count</p>

            <p class="help-text members-text">Members</p>
        </div>

        <div class="roles-list">
            @foreach (PlanetRole role in _roles.Where(x => (_searchRolesValue == "" || x.Name.Contains(_searchRolesValue))))
            {
                // For magic lambda
                var roleX = role;

                <div  
                    @onpointerdown="@(e => OnRoleItemClick(roleX))" 
                    @ondragstart="@(() => OnRoleDrag(roleX))" 
                    @ondrop="@(async () => await OnRoleDrop(roleX))" 
                    draggable="true"
                    ondragover="event.preventDefault();" 
                    class="roles-row" @onclick="@(() => OnClickEdit(roleX))">
                    <div class="role-name-div">
                        <p class="roles-name" style="color:@role.Color">
                            @role.Name
                        </p>
                    </div>
                    <div class="role-member-count-div">
                        <p class="member-count">@_roleMemberCounts[role.Id]</p>
                        <img alt="Person" class="member-icon" src="_content/Valour.Client/media/Person-Icon.svg" />
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    
    [CascadingParameter]
    public ModalRoot ModalRoot { get; set; }

    [Parameter]
    public Planet Planet { get; set; }

    private List<PlanetRole> _roles = new();

    private Dictionary<long, int> _roleMemberCounts = new();

    // Stuff for role creation //

    private PlanetRole _role = new PlanetRole()
    {
        Name = "New Role",
        Color = "#ffffff"
    };

    private bool _editMode = false;

    private string _roleNameSpan = "";
    ITaskResult _result;

    private string _searchRolesValue = "";

    private long _rolePlanetPerms;
    private long _roleChatPerms;
    private long _roleCategoryPerms;
    private long _roleVoicePerms;

    // Stuff for role editing //

    private PlanetRole _selected;

    private PlanetRole _draggingRole;

    private void OnRoleDrag(PlanetRole role){
        _draggingRole = role;
    }

    private void OnColorChange(ChangeEventArgs e)
    {
        var color = e.Value?.ToString() ?? "#ffffff";
        _role.Color = color;
        
        StateHasChanged();
    }

    private async Task OnRoleDrop(PlanetRole droppedOn){

        var droppedOnIndex = _roles.IndexOf(droppedOn);
        
        // Cannot move default role
        if (_draggingRole.IsDefault || droppedOn.IsDefault)
            return;

        _roles.Remove(_draggingRole);
        _roles.Insert(droppedOnIndex, _draggingRole);

        var ids = _roles.Select(x => x.Id);

        var result = await droppedOn.Node.PostAsync($"api/planets/{droppedOn.PlanetId}/roles/order", ids);

        Console.WriteLine(result.Message);

        // StateHasChanged();
    }

    private void OnRoleItemClick(PlanetRole role){
        _draggingRole = role;
    }

    private void PermClick(long value, ref long perms)
    {
        perms ^= value;
        Console.WriteLine($"Toggled value for permission {value}");
    }

    protected override async Task OnInitializedAsync()
    {
        _roles = await Planet.GetRolesAsync();

        await UpdateRoleMemberCount();

        ModelObserver<PlanetRole>.OnAnyUpdated += OnRolesUpdate;
        ModelObserver<PlanetRole>.OnAnyDeleted += OnRoleDeletion;

        ModelObserver<PlanetRoleMember>.OnAnyUpdated += OnMemberRoleUpdate;
        ModelObserver<PlanetRoleMember>.OnAnyDeleted += OnMemberRoleDelete;
    }

    private async Task UpdateRoleMemberCount()
    {
        var members = await Planet.GetMembersAsync();
        foreach (var role in _roles)
        {
            _roleMemberCounts[role.Id] = 0;
        }
        foreach (var member in members)
        {
            var memberRoles = await member.GetRolesAsync();
            foreach(var role in memberRoles)
            {
                _roleMemberCounts[role.Id] += 1;
            }
        }
    }

    private void GoBack() 
    {
        _role = new PlanetRole()
        {
            Name = "New Role",
            Bold = false,
            Italics = false,
            PlanetId = Planet.Id
        };

        _editMode = false;

        StateHasChanged();
    }

    private async Task OnMemberRoleUpdate(ModelUpdateEvent<PlanetRoleMember> eventData)
    {
        var roleMember = eventData.Model;
        if (roleMember.PlanetId == Planet.Id)
        {
            await UpdateRoleMemberCount();
            StateHasChanged();
        }
    }
    
    private async Task OnMemberRoleDelete(PlanetRoleMember roleMember)
    {
        if (roleMember.PlanetId == Planet.Id)
        {
            await UpdateRoleMemberCount();
            StateHasChanged();
        }
    }

    private void OnClickEdit(PlanetRole editRole)
    {
        _selected = editRole;

        _role = editRole;
        _editMode = true;

        _rolePlanetPerms = editRole.Permissions;
        _roleChatPerms = editRole.ChatPermissions;
        _roleCategoryPerms = editRole.CategoryPermissions;
        _roleVoicePerms = editRole.VoicePermissions;

        StateHasChanged();
    }

    private void DeleteRole(PlanetRole role)
    {
        var cData =
        new ConfirmModalComponent.ModalParams(
            $"Delete {role.Name}?",
            "This cannot be undone",
            "Confirm",
            "Cancel",
            async () => {
                _result = await _selected.Node.DeleteAsync($"api/roles/{role.Id.ToString()}");
                StateHasChanged();
            },
            () =>
            {
                StateHasChanged();
                return Task.CompletedTask;
            }
        );
        
        ModalRoot.OpenModal<ConfirmModalComponent>(cData);
    }

    private void OnClickCreateMode()
    {
        _role = new PlanetRole()
        {
            Name = "New Role",
            Bold = false,
            Italics = false,
            PlanetId = Planet.Id,

            Permissions = PlanetPermissions.Default,
            ChatPermissions = ChatChannelPermissions.Default,
            CategoryPermissions = CategoryPermissions.Default,
            VoicePermissions = VoiceChannelPermissions.Default
        };

        _rolePlanetPerms = PlanetPermissions.Default;
        _roleChatPerms = ChatChannelPermissions.Default;
        _roleCategoryPerms = CategoryPermissions.Default;
        _roleVoicePerms = VoiceChannelPermissions.Default;

        _editMode = true;

        StateHasChanged();
        //await editPlanetModal.Open();
    }

    private void OnClickAdmin()
    {
        _role.IsAdmin = !_role.IsAdmin;
        StateHasChanged();
    }

    private void OnClickCanMention()
    {
        _role.AnyoneCanMention = !_role.AnyoneCanMention;
        StateHasChanged();
    }

    private async Task OnClickSave()
    {
        _role.Permissions = _rolePlanetPerms;
        _role.ChatPermissions = _roleChatPerms;
        _role.CategoryPermissions = _roleCategoryPerms;
        _role.VoicePermissions = _roleVoicePerms;
        
        // Create json payload to send to server for request
        // Id and authority is handled by the server

        //string json = JsonConvert.SerializeObject(role);

        TaskResult<PlanetRole> response;

        bool creating = false;

        // If the id is not set, this is a new role to be created
        if (_role.Id == 0)
        {
            response = await LiveModel.CreateAsync(_role);
            creating = true;
        }
        // Otherwise we are editing a prior role
        else
        {
            response = await LiveModel.UpdateAsync(_role);
        }
        
        _result = response;
        
        if (response.Success)
        {

            // get new role
            _role = await PlanetRole.FindAsync(response.Data.Id, Planet.Id);

            // If creating, send back to role list afterwards
            if (creating)
            {
                _editMode = false;
                _roleMemberCounts[_role.Id] = 0;
            }
        }

        StateHasChanged();

        _editMode = false;
    }

    private async Task OnRoleDeletion(PlanetRole role)
    {
        _roles = await Planet.GetRolesAsync();
    }

    // Handle role list changes that may occur while open
    private async Task OnRolesUpdate(ModelUpdateEvent<PlanetRole> eventData)
    {
        var role = eventData.Model;
        var oldRole = _roles.FirstOrDefault(x => x.Id == role.Id);

        if (oldRole == null)
        {
            _roles = await Planet.GetRolesAsync();
            StateHasChanged();
            return;
        }

        var index = _roles.IndexOf(oldRole);

    // Set to new role
        _roles[index] = role;

        StateHasChanged();
    }

}