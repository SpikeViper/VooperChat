@inherits WindowBase
@inject IJSRuntime JsRuntime

<div class="window-wrapper"
     style="z-index: @GetZIndex(); left:  @(_left)px; top:  @(_top)px;"
     @ref="@_element">
    <div class="tab-wrapper"
         @onmousedown:stopPropagation="true"
         @onmousedown="OnClickTab">
        <div class="tab">
            <div class="tab-info">
                <img alt="tab icon" class="tab-icon" src="@WindowData.Icon"/>
                <span class="tab-title">@WindowData.Title</span>
            </div>
            <div class="tab-buttons"
                 @onclick:stopPropagation="true"
                 @onmousedown:stopPropagation="true">
                <span class="minus" @onclick="@OnClickMinus">
                    <i class="bi bi-dash-circle-fill"></i>
                </span>
            </div>
        </div>
    </div>
    <div class="window"
         @onmousedown:stopPropagation="true"
         @onmousedown="OnClickWindow">
        <DynamicComponent Type="@WindowData.Type" Parameters="@_windowParams"/>
    </div>
</div>

@code {
    [Parameter]
    public DockFloaters Container { get; set; }
    
    [Parameter]
    public WindowData WindowData { get; set; }
    
    public override void ChangeType(Type newType, object newData, string newTitle, string newIcon)
    {
        WindowData.Type = newType;
        WindowData.Data = newData;
        WindowData.Title = newTitle;
        WindowData.Icon = newIcon;
        
        _windowParams = new Dictionary<string, object>()
        {
            {"Window", WindowData},
            {"Data", WindowData.Data}
        };

        ReRender();
    }
    
    public override async Task CloseAsync()
    {
        await Container.RemoveFloater(WindowData);
    }
    
    private IJSInProcessObjectReference _jsModule;
    private ElementReference _element;
    private DotNetObjectReference<FloatingWindow> _dotnetRef;

    private bool _floating;
    private double _left;
    private double _top;

    private Dictionary<string, object> _windowParams;

    private bool _render = false;

    protected override void OnInitialized()
    {
        _windowParams = new Dictionary<string, object>()
        {
            {"Window", WindowData},
            {"Data", WindowData.Data}
        };

        _left = WindowData.StartFloatX;
        _top = WindowData.StartFloatY;
    }

    protected override bool ShouldRender() => _render;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Floater first render " + WindowData.Id);
            _dotnetRef = DotNetObjectReference.Create(this);
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/DockWindows/FloatingWindow.razor.js");
            await _jsModule.InvokeVoidAsync("enableDrag", _element, _dotnetRef, WindowData.StartFloatX, WindowData.StartFloatY);
        }
        
        _render = false;
        
        Console.WriteLine("Rendered " + WindowData.Id);
    }
    
    public override void NotifyNeedsReRender()
    {
        // Floating windows do NOT re-render via blazor
        // ReRender();
        
        // Instead, we use JS to re-render the window
        _jsModule.InvokeVoid("reRender", _element, Container.ActiveFloater.Id == WindowData.Id);
    }

    public class FloaterPositionData
    {
        public double ClientX { get; set; }
        public double ClientY { get; set; }
    }
    
    public async Task<FloaterPositionData> GetPositionAsync()
    {
        var pos =  await _jsModule.InvokeAsync<double[]>("getPosition", _element);
        return new FloaterPositionData()
        {
            ClientX = pos[0],
            ClientY = pos[1]
        };
    }
    
    public override async Task AddSiblingWindow(WindowData newTabData)
    {
        // Get current window position
        var pos = await GetPositionAsync();
        
        await Container.AddFloater(newTabData, pos.ClientX + 50, pos.ClientY + 50);
    }
    
    private async Task OnClickMinus()
    {
        await CloseAsync();
    }

    private int GetZIndex()
    {
        if (Container?.ActiveFloater == WindowData)
            return 101;

        return 100;
    }
    
    private async Task OnClickTab()
    {
        Container.SetActiveFloater(this.WindowData);
        await GlobalWindowData.SetGlobalActiveWindowAsync(this.WindowData);
    }

    private async Task OnClickWindow()
    {
        Container.SetActiveFloater(this.WindowData);
        await GlobalWindowData.SetGlobalActiveWindowAsync(this.WindowData);
    }

    [JSInvokable]
    public async Task OnDragStart()
    {
        await Container.NotifyDragging(this.WindowData);
    }
    
    [JSInvokable]
    public async Task OnDragEnd()
    {
        await Container.NotifyStopDragging();
    }

    public void ReRender()
    {
        _render = true;
        StateHasChanged();
    }
}