@inject IJSRuntime JsRuntime

<div @ref="@_element" class="dock-container @GetSplitClass()">
    @switch (Split)
    {
        // No split
        case SplitState.None:
        {
            foreach (var window in Windows)
            {
                <DockWindow @ref="@window.WindowBase" @key="@window.Id" Container="@this" WindowData="@window"/>
            }
            break;
        }
        case SplitState.Horizontal:
        {
            <DockContainer @ref="@ChildContainerA" ParentContainer="@this" Windows="@SplitWindowsA" />
            <DockContainer @ref="@ChildContainerB" ParentContainer="@this" Windows="@SplitWindowsB" />
            break;
        }
        case SplitState.Vertical:
        {
            <DockContainer @ref="@ChildContainerA" ParentContainer="@this" Windows="@SplitWindowsA" />
            <DockContainer @ref="@ChildContainerB" ParentContainer="@this" Windows="@SplitWindowsB" />
            break;
        }
    }
    

    @if (DockFloaters.CurrentlyDragging is not null && Split == SplitState.None)
    {
        <div class="drop-targets"
             @onclick:stopPropagation="true">
            <div class="targets">
                <div @onclick="(async () => await OnDrop(DockContainer.DropLocation.Center))" class="center w-drop-target"><i class="bi bi-bullseye"></i></div>
                <div @onclick="(async () => await OnDrop(DockContainer.DropLocation.Up))" class="up w-drop-target"><i class="bi bi-caret-up-fill"></i></div>
                <div @onclick="(async () => await OnDrop(DockContainer.DropLocation.Down))" class="down w-drop-target"><i class="bi bi-caret-down-fill"></i></div>
                <div @onclick="(async () => await OnDrop(DockContainer.DropLocation.Left))" class="left w-drop-target"><i class="bi bi-caret-left-fill"></i></div>
                <div @onclick="(async () => await OnDrop(DockContainer.DropLocation.Right))" class="right w-drop-target"><i class="bi bi-caret-right-fill"></i></div>
            </div>
        </div>
    }
</div>

@code {
    
    public enum DropLocation
    {
        Center,
        Up,
        Down,
        Left,
        Right
    }
    
    public enum SplitState
    {
        None,
        Horizontal,
        Vertical
    }

    private string GetSplitClass()
    {
        switch (Split)
        {
            case SplitState.None:
                return "";
            case SplitState.Horizontal:
                return "split horizontal";
            case SplitState.Vertical:
                return "split vertical";
        }

        return "";
    }

    private IJSInProcessObjectReference _jsModule;
    private ElementReference _element;
    
    [Parameter]
    public DockContainer ParentContainer { get; set; }
    
    [Parameter] // Can be initialized via parent container
    public List<WindowData> Windows { get; set; }
    
    // Only used if this dock is in split mode
    public DockContainer ChildContainerA { get; set; }
    public DockContainer ChildContainerB { get; set; }
    public List<WindowData> SplitWindowsA { get; set; }
    public List<WindowData> SplitWindowsB { get; set; }
    
    public WindowData ActiveWindow { get; set; }
    
    public static DockContainer MainDock { get; set; }

    public SplitState Split { get; set; } = SplitState.None;
    private bool _armSplit;
    private bool _armUnSplit;

    protected override void OnInitialized()
    {
        
        if (Windows is null)
        {
            Windows = new List<WindowData>();
        }
        else
        {
            SetActiveTabWindow(Windows.Last());
        }
        

        DockFloaters.OnStartDragging += OnDragging;
        DockFloaters.OnStopDragging += OnDraggingStop;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/DockWindows/DockContainer.razor.js");
        }

        if (_armSplit)
        {
            _armSplit = false;
            await _jsModule.InvokeVoidAsync("doSplit", _element, Split == SplitState.Horizontal ? "horizontal" : "vertical");
        }
        
        if (_armUnSplit)
        {
            _armUnSplit = false;
            await _jsModule.InvokeVoidAsync("doUnSplit", _element);
        }
    }

    public async Task AddWindowAsync(WindowData window)
    {
        // Mobile devices can only have one window
        if (DeviceInfo.IsMobile)
        {
            Windows.Clear();
        }
        
        Windows.Add(window);
        ActiveWindow = window;

        GlobalWindowData.AddGlobalWindow(window);
        await GlobalWindowData.SetGlobalActiveWindowAsync(window);
        
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }
    
    public async Task AddDefaultWindowAsync()
    {
        var window = new WindowData
        {
            Title = "Home",
            Icon = "./_content/Valour.Client/media/logo/logo-128.png",
            Type = typeof(HomeWindowComponent),
        };
        
        await AddWindowAsync(window);
        
        NotifyTabWindowsChange();
    }
    
    public async Task RemoveWindow(WindowData window)
    {
        Windows.Remove(window);
        // SplitWindowsA?.Remove(window);
        // SplitWindowsB?.Remove(window);

        // Out of windows and not split - need to add default window or kill self
        if (Windows.Count == 0 && Split == SplitState.None)
        {
            if (ParentContainer is null)
            {
                await AddDefaultWindowAsync();
            }
            else
            {
                await ParentContainer.UnSplit();
            }
        }
        
        if (window == ActiveWindow)
        {
            if (Windows.Any())
            {
                ActiveWindow = Windows.Last();
            }
        }
        
        GlobalWindowData.RemoveGlobalWindow(window);
        
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }

    public async Task CloseAllAsync()
    {
        if (ChildContainerA is not null)
        {
            await ChildContainerA.CloseAllAsync();
        }
        
        if (ChildContainerB is not null)
        {
            await ChildContainerB.CloseAllAsync();
        }
        
        if (Windows is not null)
        {
            foreach (var window in Windows)
            {
                await RemoveWindow(window);
            }
        }
    }
    
    public void SetActiveTabWindow(WindowData window)
    {
        if (!Windows.Contains(window))
            return;

        // Don't re-render if the window is already active
        if (ActiveWindow?.Id == window.Id)
            return;
        
        ActiveWindow = window;
        StateHasChanged();
        
        NotifyTabWindowsChange();
    }

    public async Task NotifyNewFloater(WindowData window, double clientX = 0, double clientY = 0)
    {
        Console.WriteLine("New floater: " + window.Id);
        await DockFloaters.Instance.AddFloater(window, clientX, clientY);
        
        await RemoveWindow(window);
        
        if (Windows.Count == 0)
        {
            if (ParentContainer is null)
            {
                await AddDefaultWindowAsync();
            }
            else
            {
                await ParentContainer.UnSplit();
            }
        }
    }
    
    private async Task OnDragging()
    {
        StateHasChanged();
    }
    
    private async Task OnDraggingStop()
    {
        StateHasChanged();
    }

    public async Task OnDrop(DropLocation location)
    {
        Console.WriteLine("Dropped: " + location);
        
        if (DockFloaters.CurrentlyDragging is null)
            return;
        
        switch (location)
        {
            case DropLocation.Center:
            {
                if (Windows.Contains(DockFloaters.CurrentlyDragging))
                    return;
                
                // Remove from current dock container
                await DockFloaters.Instance.RemoveFloater(DockFloaters.CurrentlyDragging);

                // Add to this dock container
                await AddWindowAsync(DockFloaters.CurrentlyDragging);
                
                break;
            }
            case DropLocation.Right:
            {
                // Remove currently dragging from its own container
                await DockFloaters.Instance.RemoveFloater(DockFloaters.CurrentlyDragging);
                
                // Set left to all other windows
                SplitWindowsA = Windows;
                
                // Clear normal windows
                Windows = null;
                
                // Set right to the currently dragging window
                SplitWindowsB = new List<WindowData> { DockFloaters.CurrentlyDragging };
                
                // Init split state
                Split = SplitState.Horizontal;
                
                _armSplit = true;
                
                // Re-render
                StateHasChanged();
                
                break;
            }
            case DropLocation.Left:
            {
                // Remove currently dragging from its own container
                await DockFloaters.Instance.RemoveFloater(DockFloaters.CurrentlyDragging);
                
                // Set right to all other windows
                SplitWindowsB = Windows;
                
                // Clear normal windows
                Windows = null;
                
                // Set left to the currently dragging window
                SplitWindowsA = new List<WindowData> { DockFloaters.CurrentlyDragging };
                
                // Init split state
                Split = SplitState.Horizontal;
                
                _armSplit = true;
                
                // Re-render
                StateHasChanged();
                
                break;
            }
            case DropLocation.Up:
            {
                // Remove currently dragging from its own container
                await DockFloaters.Instance.RemoveFloater(DockFloaters.CurrentlyDragging);
                
                // Set bottom to all other windows
                SplitWindowsB = Windows;
                
                // Clear normal windows
                Windows = null;
                
                // Set top to the currently dragging window
                SplitWindowsA = new List<WindowData> { DockFloaters.CurrentlyDragging };
                
                // Init split state
                Split = SplitState.Vertical;
                
                _armSplit = true;
                
                // Re-render
                StateHasChanged();
                
                break;
            }
            case DropLocation.Down:
            {
                // Remove currently dragging from its own container
                await DockFloaters.Instance.RemoveFloater(DockFloaters.CurrentlyDragging);
                
                // Set top to all other windows
                SplitWindowsA = Windows;
                
                // Clear normal windows
                Windows = null;
                
                // Set bottom to the currently dragging window
                SplitWindowsB = new List<WindowData> { DockFloaters.CurrentlyDragging };
                
                // Init split state
                Split = SplitState.Vertical;
                
                _armSplit = true;
                
                // Re-render
                StateHasChanged();
                
                break;
            }
        }

        DockFloaters.CurrentlyDragging = null;
    }

    public async Task UnSplit()
    {
        if (Split == SplitState.None)
            return;
        
        Split = SplitState.None;
        
        Windows = new List<WindowData>();
        
        if (SplitWindowsA is not null)
            Windows.AddRange(SplitWindowsA);
        
        if (SplitWindowsB is not null)
            Windows.AddRange(SplitWindowsB);
        
        SplitWindowsA = null;
        SplitWindowsB = null;
        
        _armUnSplit = true;

        Console.WriteLine($"Unsplitting. Root: {ParentContainer is null}. New window count: {Windows.Count}");
        
        SetActiveTabWindow(Windows.LastOrDefault());
        
        StateHasChanged();
    }

    private void NotifyTabWindowsChange()
    {
        foreach (var window in Windows)
        {
            if (window.WindowBase is not null)
                window.WindowBase.NotifyNeedsReRender();
        }
    }
}