@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@using Valour.Api.Models.Messages
@using System.Reflection.Metadata
@using Microsoft.AspNetCore.Components.Rendering
@using Valour.Api.Nodes

<ContextMenuTrigger @key="@_id" Id="@_id" CssClass="chat-holder mt-auto" MouseButtonTrigger="MouseButtonTrigger.ContextOrHold" @onpointerdown:stopPropagation="true" MenuId="message-context">
    <!-- Pushes messages to bottom -->
    <div style="flex-grow: 1; flex-shrink: 1; height: 0"></div>
    
    <!-- Actual messages -->
    <CascadingValue Value="this" IsFixed="true">
        @MessagesFragment
    </CascadingValue>

    <div id="anchor" style="overflow-anchor: auto; height: 1px; margin-top: -1px;"></div>
</ContextMenuTrigger>

<InputComponent @ref="@InputComponent" MessageHolder="@this" />

@code {
    public class MessageComponentParams
    {
        public Message Message { get; set; }
        public Message LastMessage { get; set; }
        public bool IsInnerReply { get; set; }
        public bool Ghost { get; set; }
    }

    [CascadingParameter]
    public ChatChannelWindow Window { get; set; }
    
    public InputComponent InputComponent { get; set; }
    
    public List<Message> DisplayedMessages { get; set; }

    public List<Message> QueuedMessages { get; set; }

    public List<MessageComponent> RenderedMessages { get; set; }

    private DotNetObjectReference<MessageHolderComponent> _thisRef;

    private IJSInProcessObjectReference _jsModule;

    private string _id;

    private bool _canRenderFlag = false;

    private RenderFragment MessagesFragment => builder =>
    {
        Message lastMessage = null;

        // Displayed messages
        if (DisplayedMessages is not null && DisplayedMessages.Count > 0)
        {
            // Render each message
            foreach (var message in DisplayedMessages)
            {
                var messageParams = new MessageComponentParams()
                {
                    Message = message,
                    IsInnerReply = false,
                    LastMessage = lastMessage,
                    Ghost = false,
                };

                builder.OpenComponent<MessageComponent>(0);
                builder.AddAttribute(1, "ParamData", messageParams);
                builder.SetKey(message.RenderKey);
                builder.CloseComponent();

                lastMessage = message;
            }
        }

        // Queued messages
        if (QueuedMessages is not null && QueuedMessages.Count > 0)
        {
            // Render each message
            foreach (var message in QueuedMessages)
            {
                var messageParams = new MessageComponentParams()
                {
                    Message = message,
                    IsInnerReply = false,
                    LastMessage = lastMessage,
                    Ghost = true,
                };

                builder.OpenComponent<MessageComponent>(0);
                builder.AddAttribute(1, "ParamData", messageParams);
                builder.SetKey($"q-{message.RenderKey}");
                builder.CloseComponent();

                lastMessage = message;
            }
        }
    };
    

    protected override void OnInitialized()
    {
        _id = $"innerWindow-{Window.Id}";
        
        RenderedMessages = new List<MessageComponent>();
        DisplayedMessages = new List<Message>();
        QueuedMessages = new List<Message>();

        ValourClient.OnMessageDeleted += OnDeleteMessage;
        ValourClient.OnNodeReconnect += OnNodeReconnect;

        _thisRef = DotNetObjectReference.Create(this);
    }

    public async Task LoadRecentMessages(int count)
    {
        var messages = await Window.Channel.GetLastMessagesAsync(64);
        
        // Add to cache
        foreach (var msg in messages)
        {
            await ValourCache.Put(msg.Id, msg);
            if (msg.ReplyTo is not null)
            {
                await ValourCache.Put(msg.ReplyTo.Id, msg.ReplyTo);
            }
        }

        await AddMessages(messages, true, true);
    }

    public void AddQueuedMessage(Message message)
    {
        //Console.WriteLine("Queued Message");
        QueuedMessages.Add(message);
        Refresh();
    }

    public void RemoveQueuedMessage(string fingerprint)
    {
        
        var queued = QueuedMessages.FirstOrDefault(x => x.Fingerprint == fingerprint);
        if (queued != null)
        {
            //Console.WriteLine("Removed Queued Message");
            QueuedMessages.Remove(queued);
            Refresh();
        }
    }

    public void RemoveErrorMessage()
    {
        var error = DisplayedMessages.FirstOrDefault(x => x.Id == long.MaxValue);
        if (error != null) { 
           //Console.WriteLine("Removed error message");
           DisplayedMessages.Remove(error); 
           Refresh();
        }
    }

    public void Clear()
    {
        DisplayedMessages.Clear();
        QueuedMessages.Clear();
        RenderedMessages.Clear();
        
        Refresh();
    }

    public Message GetLastMessage()
    {
        if (QueuedMessages != null && QueuedMessages.Any())
        {
            return QueuedMessages.Last();
        }
        else if (DisplayedMessages != null && DisplayedMessages.Any())
        {
            return DisplayedMessages.Last();
        }

        return null;
    }
    
    private MessageComparer _messageComparer = new MessageComparer();

    private class MessageComparer : IComparer<Message>
    {
        public int Compare(Message a, Message b)
        {
            return a.Id > b.Id ? 1 : -1;
        }
    }

    public async Task AddMessages(List<Message> messages, bool refresh = true, bool scroll = false)
    {
        foreach (var msg in messages)
        {
            // No duplicates
            if (DisplayedMessages.Any(x => x.Id == msg.Id))
            {
                continue;
            }
            
            // Resort
            DisplayedMessages.Sort(_messageComparer);
        }
        
        DisplayedMessages.AddRange(messages);

        if (refresh)
        {
            Refresh();
        }
        
        if (scroll)
        {
            await ScrollToBottom();
        }
        
        InputComponent.Refresh();
    }

    public void InsertMessages(int position, List<Message> messages, bool refresh = true)
    {
        DisplayedMessages.InsertRange(position, messages);

        if (refresh)
        {
            Refresh();
        }
    }

    public async Task AddMessage(Message message, bool refresh = true)
    {
        QueuedMessages.RemoveAll(x => x.Fingerprint == message.Fingerprint);

        //Get current window scroll pos
        var atBottom = await _jsModule.InvokeAsync<bool>("isAtBottom", _id);

        // check if theres too many messages
        if (atBottom && DisplayedMessages.Count > 120)
        {
            DisplayedMessages.RemoveRange(0, DisplayedMessages.Count - 120);
        }

        DisplayedMessages.Add(message);

        // Flag for UI refresh
        if (refresh)
        {
            Refresh();
        }

        await ScrollToBottom();
    }

    public void Refresh()
    {
        _canRenderFlag = true;
        StateHasChanged();
    }

    /* This is called by the MessageComponent when it is rendered */
    public void AddRenderedMessage(MessageComponent message)
    {
        RenderedMessages.Add(message);
    }

    /* This is called by the MessageComponent when it is rendered */
    public void RemoveRenderedMessage(MessageComponent message)
    {
        RenderedMessages.Remove(message);
    }

    //protected override async Task OnParametersSetAsync()
    //{

    //}

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        ValourClient.OnMessageDeleted -= OnDeleteMessage;
        await _jsModule.DisposeAsync();
    }

    public async Task OnDeleteMessage(Message message)
    {
        if (message.ChannelId != Window.Channel.Id)
            return;

        DisplayedMessages.RemoveAll(x => x.Id == message.Id);
        QueuedMessages.RemoveAll(x => x.Id == message.Id);

        var nextMessage = RenderedMessages.FirstOrDefault(x => x.Message.Id > message.Id);
        if (nextMessage != null){
            var lastMessage = RenderedMessages
                .OrderByDescending(x => x.Message.Id)
                .FirstOrDefault(x => x.Message.Id < message.Id);
            
            if (lastMessage is not null)
                nextMessage.SetLast(lastMessage.Message);
            
            await nextMessage.RefreshMessage();
            nextMessage.ReRender();
        }

        Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSInProcessObjectReference>("import", "./_content/Valour.Client/Components/Windows/ChannelWindows/MessageHolderComponent.razor.js");
            await SetupJs();
            await ScrollToBottom();
        }
        
        #if DEBUG
        Console.WriteLine($"Message holder render! ({firstRender})");
        #endif

        _canRenderFlag = false;
    }
    
    public async Task OnNodeReconnect(Node node)
    {
        await Logger.Log($"Chat window {Window.Channel.Name} reloading due to node reconnect. Node: {node.Name}", "yellow");
        
        
    }

    protected override bool ShouldRender() => _canRenderFlag;

    /////////////////////
    // JS Interop Zone //
    /////////////////////

    public async Task SetupJs()
    {
        await _jsModule.InvokeVoidAsync("setup", _id, _thisRef);
    }

    public async Task ScrollToBottom(bool force = false)
    {
        if (_jsModule is not null)
            await _jsModule.InvokeVoidAsync("scrollToBottom", _id, force);
    }

    public async Task ScrollToBottomAnimated()
    {
        await _jsModule.InvokeVoidAsync("scrollToBottomAnimated", _id);
    }

    public async Task UpdateScrollPosition()
    {
        await _jsModule.InvokeVoidAsync("updateScrollPosition", _id);
    }

    public async Task ScaleScrollPosition()
    {
        await _jsModule.InvokeVoidAsync("scaleScrollPosition", _id);
    }

    [JSInvokable("OnScrollTopInvoke")]
    public async Task OnScrollTop()
    {
        if (DisplayedMessages == null ||
            DisplayedMessages.Count == 0)
        {
            return;
        }

        var firstId = DisplayedMessages[0].Id;

        Console.WriteLine($"Fetching older messages from id {firstId} for window {Window.Id}");

        var messages = await Window.Channel.GetMessagesAsync(firstId, 64);

        if (messages is null || !messages.Any())
            return;

        foreach (var msg in messages)
        {
            await msg.AddToCache(msg);
            var reply = msg.ReplyTo;
            if (reply is not null)
            {
                await reply.AddToCache(reply);
            }
        }

        await UpdateScrollPosition(); // This saves the scroll position

        InsertMessages(0, messages);

        await ScaleScrollPosition(); // This ensures the page doesnt move harshly
    }
}