@using System.Text
@using Valour.Api.Nodes
@implements IDisposable
@inject WindowManager WindowManager

<!-- Cascade a bunch of values that messages and subcomponents need -->
<CascadingValue Value='Channel' IsFixed="true">
    <CascadingValue Value='Window' IsFixed="true">
        <CascadingValue Value='this' IsFixed="true">
            <WindowFrameComponent @ref="@WindowFrame" Window="@Window" Title="@Title" Description="@Description">
                <ChannelWatchingComponent ParentComponent="this" Channel="Channel" />
                <CascadingValue Value='ChannelPermissions'>
                    <MessageHolderComponent @ref="MessageHolder" @key="@($"mh-{Window.Id}")" />
                </CascadingValue>
            </WindowFrameComponent>
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {
    [Parameter]
    public ChatChannelWindow Window { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public WindowFrameComponent WindowFrame { get; set; }

    public event Func<Channel, Task> OnChannelChange;

    public MessageHolderComponent MessageHolder { get; set; }

    public PermissionsNode ChannelPermissions { get; set; }

    public string Title { get; set; }

    public string Description { get; set; }
    
    /* Planet Only */
    private Planet _planet;
    private PlanetMember _selfMember;
    
    private bool _canRenderFlag;
    
    public Channel Channel;

    private DotNetObjectReference<ChatChannelWindowComponent> _thisRef;

    // Runs when page is initialized
    protected override async Task OnInitializedAsync()
    {
        _thisRef = DotNetObjectReference.Create(this);

        Window.SetComponent(this);

        Console.WriteLine("Initializing channel window component.");

        Channel = Window.Channel;

        ValourClient.OnMessageReceived += OnReceiveMessage;
        ValourClient.OnMessageEdited += OnReceiveMessageEdit;
        
        await Channel.Open();
    }

    public void Refresh()
    {
        _canRenderFlag = true;
        StateHasChanged();
    }

    public virtual Type GetInputComponentType() => 
        typeof(InputComponent);

    public async Task<string> GetChannelDisplayTitleAsync()
    {
        if (Window.Channel.PlanetId is not null)
        {
            return Channel.Name;
        }
        else
        {
            
            var others = Channel.Members.Where(x => x.UserId != ValourClient.Self.Id).ToList();

            if (!others.Any())
                return "Chat with yourself";
            
            var sb = new StringBuilder("Chat with ");
            
            var i = 0;
            foreach (var other in others)
            {
                var user = await User.FindAsync(other.UserId);
                
                sb.Append(user.Name);
                if (i < others.Count - 1)
                    sb.Append(", ");
                else
                    sb.Append(" ");
                
                i++;
            }

            return sb.ToString();
        }
    }

    public virtual Task<string> GetChannelDisplayDescriptionAsync() =>
        Task.FromResult(Channel.Description);

    public virtual async Task SetupNewChannelAsync()
    {
        // Planet stuff
        if (Channel.PlanetId is not null)
        {
            _planet = await Channel.GetPlanetAsync();
            _selfMember = await _planet.GetSelfMemberAsync();

            _planet.OnDeleted += OnPlanetDeleted;
            _selfMember.OnDeleted += OnSelfMemberDeleted;
            
            ChannelPermissions = await Channel.GetFlattenedPermissionsAsync(_selfMember.Id);
        }
        
        Channel.OnUpdated += OnChatChannelUpdate;
        
        Title = await GetChannelDisplayTitleAsync();
        Description = await GetChannelDisplayDescriptionAsync();
        
        Refresh();
        
        MessageHolder.Clear();
        await MessageHolder.LoadRecentMessages(64);
    }

    public async Task SwapChannel(Channel newChannel)
    {
        Channel = newChannel;

        await WindowManager.SwapWindowChannel(Window, newChannel);

        await SetupNewChannelAsync();
        await MessageHolder.InputComponent.SetupNewChannelAsync();

        if (OnChannelChange is not null)
            await OnChannelChange.Invoke(Channel);

        Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupNewChannelAsync();
        }
        
        _canRenderFlag = false;
    }

    public async Task OnWindowClosed()
    {
        Console.WriteLine($"Gracefully exiting channel {Channel.Id} due to window change.");
        await Channel.Close();
    }

    public async Task OpenEditMode(MessageComponent message)
    {
        await MessageHolder.InputComponent.OnBeginEdit(message, message.Message);
    }

    public async Task CloseEditMode(bool cancel = false)
    {
        await MessageHolder.InputComponent.OnStopEdit(cancel);
    }

    protected override bool ShouldRender()
        => _canRenderFlag;

    public Task OnChatChannelUpdate(ModelUpdateEvent eventData)
    {
        Refresh();
        return Task.CompletedTask;
    }

    public virtual async Task OnReceiveMessage(Message message)
    {
    // Ignore messages not meant for this channel
        if (message.ChannelId != Channel.Id)
            return;
        
        ValourClient.SetChannelLastViewedState(Channel.Id, message.TimeSent);
        
        await MessageHolder.AddMessage(message);
        MessageHolder.InputComponent.PreviewMessageComponent.SetLast(MessageHolder.GetLastMessage());
        MessageHolder.InputComponent.PreviewMessageComponent.CheckMinimal();
        MessageHolder.InputComponent.PreviewMessageComponent.ReRender();
    }
    
    public virtual async Task OnReceiveMessageEdit(Message message)
    {
        // Ignore messages not meant for this channel
        if (message.ChannelId != Channel.Id)
            return;

        foreach (var messageComponent in MessageHolder.RenderedMessages)
        {
            if (messageComponent.Message.Id == message.Id)
            {
                messageComponent.Message.EditedTime = DateTime.UtcNow;
                messageComponent.Message.Content = message.Content;
                messageComponent.Message.AttachmentsData = message.AttachmentsData;
                messageComponent.Message.MentionsData = message.MentionsData;

                if (messageComponent.Edit)
                {
                    await messageComponent.CloseEditMode();
                }
                
                await messageComponent.BuildMessage(true);
            }
        }
    }

    public  Task OnClickWindow()
    {
        return WindowManager.SetFocusedPlanet(_planet);
    }
    
    public async Task OnPlanetDeleted()
        => await Window.CloseAsync();

    public async Task OnSelfMemberDeleted()
    {
        var newWindow = new HomeWindow();
        await WindowManager.ReplaceWindow(Window, newWindow);
        _canRenderFlag = true;
        StateHasChanged();
    }
    
    public async Task<List<PlanetMember>> GetLastChatMembers(int count)
    {
        // Not applicable for non-planet channels
        if (Channel.PlanetId is null)
            return new List<PlanetMember>();
        
        var lastMessages = MessageHolder.DisplayedMessages.TakeLast(20).Reverse();
        List<PlanetMember> chatters = new();

        foreach (var message in lastMessages)
        {
            var member = await message.GetAuthorMemberAsync();
            if (!chatters.Contains(member))
                chatters.Add(member);
        }

        return chatters;
    }
    
    void IDisposable.Dispose()
    {
        if (_planet is not null)
            _planet.OnDeleted -= OnPlanetDeleted;
        
        if (_selfMember is not null)
            _selfMember.OnDeleted -= OnSelfMemberDeleted;
        
        ValourClient.OnMessageReceived -= OnReceiveMessage;
        _thisRef.Dispose();
    }
}
