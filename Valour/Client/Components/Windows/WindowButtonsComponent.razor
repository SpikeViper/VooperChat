@inject WindowManager windowManager
@implements IDisposable

<div class="channel-buttons">
    @if (ShowHomeIcon)
    {
        <img title="Go Home" src="_content/Valour.Client/media/Home-icon.svg" class="channel-home" @onclick="OnClickHome">
    }
    @if (ShowExitIcon && windowManager.GetWindowCount() > 1)
    {
        <img title="Close Window" src="_content/Valour.Client/media/close-window-icon.svg" class="channel-exit" @onclick="OnClickExit">
    }

    <!-- This will need to be determined per-container in the future -->
    @if (windowManager.WindowCount < 6)
    {
        <img title="Add Window" src="_content/Valour.Client/media/new-window-icon.svg" class="add-window-button" @onclick="OnClickAddWindow" />
    }
</div>

@code {

    [Parameter]
    public ClientWindow Window { get; set; }

    [Parameter]
    public bool ShowHomeIcon { get; set; } = true;

    [Parameter]
    public bool ShowExitIcon { get; set; } = true;

    [Parameter]
    public Func<Task> OnClickHome { get; set; }

    [Parameter]
    public Func<Task> OnClickExit { get; set; }

    protected override void OnInitialized()
    {
        windowManager.OnWindowOpened += OnWindowsChange;
        windowManager.OnWindowClosed += OnWindowsChange;
    }

    void IDisposable.Dispose()
    {
        windowManager.OnWindowOpened -= OnWindowsChange;
        windowManager.OnWindowClosed -= OnWindowsChange;
    }

    public async Task OnWindowsChange(ClientWindow window)
    {
        StateHasChanged();
    }

    private async Task OnClickAddWindow()
    {
        if (windowManager.GetWindowCount() == 6)
        {
            return;
        }

        await windowManager.AddWindowAsync(new HomeWindow(), this.Window.Holder);
    }
}
