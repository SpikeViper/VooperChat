@using Version = Valour.Shared.Version
@if (!_hideUpdate)
{
    <div class="update-footer">
        <p class="update-text">There is a new version of Valour available! Refresh to blast into new features! 🚀🚀🚀</p>
        <p style="display: inline-block" class="update-text">Current version:&nbsp;</p>
        <p style="color:red; display:inline-block" class="update-text">@(typeof(ISharedUser).Assembly.GetName().Version.ToString()) (@(Version.ShortHash))</p>
        <p style="display: inline-block" class="update-text">&nbsp;|&nbsp;</p>
        <p style="display: inline-block" class="update-text">New version:&nbsp;</p>
        <p style="color:lawngreen; display:inline-block" class="update-text">@_newVersion</p>

        <button class="v-btn primary d-inline" @onclick="@OnClickUpdate">Ok</button>
    </div>
}


@code {
    private string _newVersion = "(Pinging server)";
    private bool _hideUpdate = true;

    protected override async Task OnInitializedAsync()
    {
        // Get latest version number
        _newVersion = (await ValourClient.GetAsync("api/version")).Data;
        StateHasChanged();
    }

    private void OnClickUpdate()
    {
        _hideUpdate = true;
        Console.WriteLine("Update prompt dismissed");
        StateHasChanged(); 
    }
    
    [JSInvokable("OnServiceUpdateAvailable")]
    public static void AppUpdate()
    {
        Console.WriteLine("New version available");
    }

    [JSInvokable("OnServiceUpdateUnavailable")]
    public static void AppNotUpdate()
    {
        Console.WriteLine("New version not available");
    }
}