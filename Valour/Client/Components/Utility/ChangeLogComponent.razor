@inject ILocalStorageService LocalStorage

@if (!_show)
{
    return;
}

<div class="change-log" @onclick="OnClose">
    <h4>Valour 0.3.5.0 Changelog (Click to close)</h4>
    
    <img alt="Valour logo for version 0.3.5.0 changelog" style="width: 95%; margin-bottom: 18px" src="_content/Valour.Client/media/0.3.5.0.jpg" />
    
    <p style="color: #00ffff">THE WINDOWING UPDATE</p>
    <p>
        The entire Valour windowing system has been rebuilt from the ground up to be slick, intuitive, and fast.
    </p>
    <ul>
        <li style="color: #ff00ff">The Window System</li>
        <ul>
            <li>Windows now are either tab-based or free-floating</li>
            <li>Tabs can be created or destroyed and dragged to create floating windows</li>
            <li>Floating windows can be dragged and dropped to split windows in half</li>
            <li>New windows are created based on the last window interacted with</li>
        </ul>
        <li>Rebuilt the entire Modal system for performance and cleanliness</li>
        <li>Rebuilt the entire Context Menu system for performance and cleanliness</li>
        <li>A large number of bugfixes</li>
    </ul>
    <p>This is honestly the coolest thing I have built in a long time - Spike</p>
</div>

@code {

    private bool _show = false;
    
    protected override async Task OnInitializedAsync()
    {
        var version = typeof(ValourClient).Assembly.GetName().Version.ToString();
        var versionSplit = version.Split('.');

        if (!await LocalStorage.ContainKeyAsync("LastVersion"))
        {
            _show = true;
        }
        else
        {
            var newVersionStr = await LocalStorage.GetItemAsync<string>("LastVersion");
            string[] newVersionSplit = newVersionStr.Split('.');

            // Should be 4, technically
            if (versionSplit.Length == 4 && newVersionSplit.Length == 4)
            {
                // Only show changelog if a non-minor update was released
                if (versionSplit[0] != newVersionSplit[0] || versionSplit[1] != newVersionSplit[1] || versionSplit[2] != newVersionSplit[2])
                {
                    _show = true;
                }
            }
        }
        
        await LocalStorage.SetItemAsync<string>("LastVersion", version);
        StateHasChanged();
    }
    
    private void OnClose()
    {
        _show = false;
        StateHasChanged();
    }

}