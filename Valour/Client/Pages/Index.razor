@page "/"
@page "/planetchannels/{StartPlanetId:long}/{StartChannelId:long}/{StartMessageId:long}"
@page "/directchannels/{StartChannelId:long}/{StartMessageId:long}"

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<!-- Check login status -->
@if (!ValourClient.IsLoggedIn)
{
	<LoginComponent FromVerified="false"></LoginComponent>
	return;
}

<ChangeLogComponent />
<SafetyPopup />
<ProfilePopup />

<div class="mobile-holder @MobileClass @EmbeddedClass">
	<!-- Modal management -->
	<ModalRoot>
		<ContextMenuRoot>
			
			<ModalInjector/>

			<body class="mainrow">
			<Sidebar></Sidebar>
			<div class="channel-and-topbar" id="mainwindow">
				<div class="topbar">
					@if (DeviceInfo.IsMobile)
					{
						<i class="bi bi-list sidebar-toggle" @onclick="Sidebar.ToggleMobileSidebar"></i>
					}
					<QuickNotifComponent></QuickNotifComponent>
					@if (DeviceInfo.IsMobile)
					{
						<img alt="Home" title="Go Home" src="_content/Valour.Client/media/Home-icon.svg" class="home" @onclick="OnClickHome"/>
					}
				</div>

				<CallComponent/>

				<!-- It's so nice when it's hidden away, just like my fears -->
				<MainWindowsComponent StartData="@_startData"></MainWindowsComponent>
			</div>
			@if (!DeviceInfo.IsMobile)
			{
				<Sidebar Flip="@true"></Sidebar>
			}

			</body>
			
			<DockFloaters />
		</ContextMenuRoot>
	</ModalRoot>
</div>


@code {
	private StartScreenData _startData;
	
	private StartScreen? Start { get; set; }
	
	[Parameter]
	public long? StartPlanetId { get; set; }
	
	[Parameter]
	public long? StartChannelId { get; set; }
	
	[Parameter]
	public long? StartMessageId { get; set; }

	private string MobileClass => DeviceInfo.IsMobile ? "mobile" : "desktop";
	
	private string EmbeddedClass => DeviceInfo.IsEmbedded ? "embedded" : "";

	protected override async Task OnInitializedAsync()
	{
		if (NavigationManager.Uri.Contains("planetchannels"))
		{
			Start = StartScreen.PlanetChannel;
		}
		else if (NavigationManager.Uri.Contains("directchannels"))
		{
			Start = StartScreen.DirectChannel;
		}

		_startData = new()
		{
			Start = Start,
			StartPlanetId = StartPlanetId,
			StartChannelId = StartChannelId,
			StartMessageId = StartMessageId
		};

		await base.OnInitializedAsync();

		GlobalWindowData.OnActivePlanetChange += OnPlanetChange;
		ValourClient.OnLogin += OnLoginAsync;
	}

	private Task OnLoginAsync()
	{
		StateHasChanged();
		return Task.CompletedTask;
	}

	public void Dispose()
	{
		GlobalWindowData.OnActivePlanetChange -= OnPlanetChange;
	}

	protected override async void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			await JsRuntime.InvokeVoidAsync("FixClip");
			await JsRuntime.InvokeVoidAsync("FitMobile");
			StateHasChanged();
		}
	}

	private Task OnPlanetChange(Planet planet)
	{
		if (planet != null)
		{
			Console.WriteLine("Index planet change: " + planet.Name);
		}
		else
		{
			Console.WriteLine("Index planet change: null");
		}

		return Task.CompletedTask;
	}

	private async Task OnClickHome()
	{
		var window = new WindowData
		{
			Title = "Home",
			Icon = "./_content/Valour.Client/media/logo/logo-128.png",
			Type = typeof(HomeWindowComponent),
		};

		await GlobalWindowData.OpenWindowAtActive(window);
	}

	[JSInvokable("OnRefocus")]
	public static async Task OnRefocus()
	{
		Console.WriteLine("Detected refocus event.");
		await ValourClient.HandleRefocus();
	}

	public void ForceRefresh()
	{
		StateHasChanged();
	}
}